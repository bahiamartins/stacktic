Searching 1 file for "console" (case sensitive)

Unable to open /lib/*
0 matches across 0 files


Searching 1 file for "console" (case sensitive)

Unable to open /lib/*.js
0 matches across 0 files


Searching 682 files for "console" (case sensitive)

/Users/maurizio/dev/stackticjs/stacktic/lib/stacktic.js:
  246    }
  247  
  248:   console.warn('Context', this.context);
  249  
  250    var filePath = path.match(/\/$/) ? path + "index.html" : (

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/lib/grunt/fail.js:
   44    if (grunt.option('stack')) {
   45      if (e.origError && e.origError.stack) {
   46:       console.log(e.origError.stack);
   47      } else if (e.stack) {
   48:       console.log(e.stack);
   49      }
   50    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/async/lib/async.js:
    1: /*global setTimeout: false, console: false */
    2  (function () {
    3  
    .
  626      };
  627  
  628:     var _console_fn = function (name) {
  629          return function (fn) {
  630              var args = Array.prototype.slice.call(arguments, 1);
  631              fn.apply(null, args.concat([function (err) {
  632                  var args = Array.prototype.slice.call(arguments, 1);
  633:                 if (typeof console !== 'undefined') {
  634                      if (err) {
  635:                         if (console.error) {
  636:                             console.error(err);
  637                          }
  638                      }
  639:                     else if (console[name]) {
  640                          _forEach(args, function (x) {
  641:                             console[name](x);
  642                          });
  643                      }
  ...
  646          };
  647      };
  648:     async.log = _console_fn('log');
  649:     async.dir = _console_fn('dir');
  650:     /*async.info = _console_fn('info');
  651:     async.warn = _console_fn('warn');
  652:     async.error = _console_fn('error');*/
  653  
  654      async.memoize = function (fn, hasher) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/coffee-script/lib/coffee-script/cake.js:
   74      relative = path.relative || path.resolve;
   75      cakefilePath = path.join(relative(__originalDirname, process.cwd()), 'Cakefile');
   76:     console.log("" + cakefilePath + " defines the following tasks:\n");
   77      for (name in tasks) {
   78        task = tasks[name];
   ..
   80        spaces = spaces > 0 ? Array(spaces + 1).join(' ') : '';
   81        desc = task.description ? "# " + task.description : '';
   82:       console.log("cake " + name + spaces + " " + desc);
   83      }
   84      if (switches.length) {
   85:       return console.log(oparse.help());
   86      }
   87    };
   88  
   89    fatalError = function(message) {
   90:     console.error(message + '\n');
   91:     console.log('To see a list of all tasks/options, run "cake"');
   92      return process.exit(1);
   93    };

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/coffee-script/lib/coffee-script/command.js:
  100          }
  101          if (topLevel) {
  102:           console.error("File not found: " + source);
  103            process.exit(1);
  104          }
  ...
  425  
  426    timeLog = function(message) {
  427:     return console.log("" + ((new Date).toLocaleTimeString()) + " - " + message);
  428    };
  429  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/eventemitter2/lib/eventemitter2.js:
  193  
  194                tree._listeners.warned = true;
  195:               console.error('(node) warning: possible EventEmitter memory ' +
  196                              'leak detected. %d listeners added. ' +
  197                              'Use emitter.setMaxListeners() to increase limit.',
  198                              tree._listeners.length);
  199:               console.trace();
  200              }
  201            }
  ...
  385  
  386            this._events[type].warned = true;
  387:           console.error('(node) warning: possible EventEmitter memory ' +
  388                          'leak detected. %d listeners added. ' +
  389                          'Use emitter.setMaxListeners() to increase limit.',
  390                          this._events[type].length);
  391:           console.trace();
  392          }
  393        }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/js-yaml/lib/js-yaml/loader.js:
  161        throw error;
  162      } else {
  163:       console.warn(error.toString());
  164      }
  165    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/entry-writer.js:
   57  
   58  EntryWriter.prototype.write = function (c) {
   59:   // console.error(".. ew write")
   60    if (this._ended) return this.emit("error", new Error("write after end"))
   61    this._buffer.push(c)
   ..
   66  
   67  EntryWriter.prototype.end = function (c) {
   68:   // console.error(".. ew end")
   69    if (c) this._buffer.push(c)
   70    this._buffer.push(EOF)
   ..
   75  
   76  EntryWriter.prototype.pause = function () {
   77:   // console.error(".. ew pause")
   78    this._paused = true
   79    this.emit("pause")
   ..
   81  
   82  EntryWriter.prototype.resume = function () {
   83:   // console.error(".. ew resume")
   84    this._paused = false
   85    this.emit("resume")
   ..
   88  
   89  EntryWriter.prototype.add = function (entry) {
   90:   // console.error(".. ew add")
   91    if (!this.parent) return this.emit("error", new Error("no parent"))
   92  
   ..
   99  
  100  EntryWriter.prototype._header = function () {
  101:   // console.error(".. ew header")
  102    if (this._didHeader) return
  103    this._didHeader = true
  ...
  121    }
  122  
  123:   // console.error(".. .. ew headerBlock emitting")
  124    this.emit("data", headerBlock)
  125    this.emit("header")
  ...
  127  
  128  EntryWriter.prototype._process = function () {
  129:   // console.error(".. .. ew process")
  130    if (!this._didHeader && !this._meta) {
  131      this._header()
  ...
  133  
  134    if (this._paused || this._processing) {
  135:     // console.error(".. .. .. paused=%j, processing=%j", this._paused, this._processing)
  136      return
  137    }
  ...
  141    var buf = this._buffer
  142    for (var i = 0; i < buf.length; i ++) {
  143:     // console.error(".. .. .. i=%d", i)
  144  
  145      var c = buf[i]
  ...
  149  
  150      if (this._paused) {
  151:       // console.error(".. .. .. paused mid-emission")
  152        this._processing = false
  153        if (i < buf.length) {
  ...
  159    }
  160  
  161:   // console.error(".. .. .. emitted")
  162    this._buffer.length = 0
  163    this._processing = false
  164  
  165:   // console.error(".. .. .. emitting drain")
  166    this.emit("drain")
  167  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/entry.js:
   88  
   89  , resume: function () {
   90:     // console.error("    Tar Entry resume", this.path)
   91      this.emit("resume")
   92      this._paused = false
   ..
   97    // This is bound to the instance
   98  , _read: function () {
   99:     // console.error("    Tar Entry _read", this.path)
  100  
  101      if (this._paused || this._reading || this._ended) return

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/extended-header-writer.js:
   16  // Don't be shy with it.  Just encode everything.
   17  function ExtendedHeaderWriter (props) {
   18:   // console.error(">> ehw ctor")
   19    var me = this
   20  
   ..
   45  
   46    EntryWriter.call(me, p)
   47:   // console.error(">> ehw props", me.props)
   48    me.props = p
   49  
   ..
   52  
   53  ExtendedHeaderWriter.prototype.end = function () {
   54:   // console.error(">> ehw end")
   55    var me = this
   56  
   ..
   73    me._ready = true
   74  
   75:   // console.error(">> ehw _process calling end()", me.props)
   76    this._stream.end()
   77  }
   78  
   79  ExtendedHeaderWriter.prototype._encodeFields = function () {
   80:   // console.error(">> ehw _encodeFields")
   81    this.body = []
   82    if (this.fields.prefix) {
   ..
   92  
   93  function encodeFields (fields, prefix, body, nop) {
   94:   // console.error(">> >> ehw encodeFields")
   95    // "%d %s=%s\n", <length>, <keyword>, <value>
   96    // The length is a decimal number, and includes itself and the \n
   ..
  162      , digits = Math.floor(Math.log(s.length) / Math.log(10)) + 1
  163  
  164:   // console.error("1 s=%j digits=%j s.length=%d", s.toString(), digits, s.length)
  165  
  166    // if adding that many digits will make it go over that length,
  ...
  174    // itself.  In that case, just bump it up again.
  175    if (s.length + digits >= Math.pow(10, digits)) digits += 1
  176:   // console.error("2 s=%j digits=%j s.length=%d", s.toString(), digits, s.length)
  177  
  178    var len = digits + s.length
  179:   // console.error("3 s=%j digits=%j s.length=%d len=%d", s.toString(), digits, s.length, len)
  180    var lenBuf = new Buffer("" + len)
  181    if (lenBuf.length + s.length !== len) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/extended-header.js:
   64        ; i < l
   65        ; this._position++, this._fieldPos++, i++) {
   66:     // console.error("top of loop, size="+this._size)
   67  
   68      var b = c[i]
   ..
   77  
   78        case SIZE:
   79:         // console.error("parsing size, b=%d, rest=%j", b, c.slice(i).toString())
   80          if (b === space) {
   81            this._state = KEY
   ..
  107          // field must end with cr
  108          if (this._fieldPos === this._size - 1) {
  109:           // console.error("finished with "+this._key)
  110            if (b !== cr) {
  111              error(this, "expected \\n at end of field")

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/extract.js:
   59  
   60    // this._fst.on("end", function () {
   61:   //   console.error("\nEEEE Extract End", me._fst.path)
   62    // })
   63  
   64    this._fst.on("close", function () {
   65:     // console.error("\nEEEE Extract End", me._fst.path)
   66      me.emit("end")
   67      me.emit("close")

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/header.js:
   46    // the path field.
   47    if (obj.prefix) {
   48:     // console.error("%% header encoding, got a prefix", obj.prefix)
   49      obj.path = obj.prefix + "/" + obj.path
   50:     // console.error("%% header encoding, prefixed path", obj.path)
   51      obj.prefix = ""
   52    }
   ..
   72        case "prefix":
   73          // special, this is an extension of the "path" field.
   74:         // console.error("%% header encoding, skip prefix later")
   75          break
   76  
   ..
  118              off = fieldOffs[fields.prefix]
  119              end = fieldEnds[fields.prefix]
  120:             // console.error("%% header writing prefix", off, end, prefix)
  121              ret = writeText(block, off, end, prefix) || ret
  122              break
  ...
  128          // on old implementations no matter what we do here.
  129          // Null out the prefix, and fallthrough to default.
  130:         // console.error("%% header writing no prefix")
  131          var poff = fieldOffs[fields.prefix]
  132            , pend = fieldEnds[fields.prefix]
  ...
  163  
  164    num = num || 0
  165:   // console.error("  numeric", num)
  166  
  167    if (num instanceof Date ||
  ...
  306            return
  307          } else {
  308:           // console.error("ustar:", val, val.toString())
  309            this.ustar = val.toString()
  310          }
  ...
  325          }
  326          prefix = val.toString("utf8").replace(/\0+$/, "")
  327:         // console.error("%% header reading prefix", prefix)
  328          break
  329  
  ...
  343    if (prefix) {
  344      this.path = prefix + "/" + this.path
  345:     // console.error("%% header got a prefix", this.path)
  346    }
  347  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/pack.js:
   17  
   18  function Pack (props) {
   19:   // console.error("-- p ctor")
   20    var me = this
   21    if (!(me instanceof Pack)) return new Pack(props)
   ..
   29    me.writable = true
   30    me._buffer = []
   31:   // console.error("-- -- set current to null in ctor")
   32    me._currentEntry = null
   33    me._processing = false
   ..
   45  
   46  Pack.prototype.addGlobal = function (props) {
   47:   // console.error("-- p addGlobal")
   48    if (this._didGlobal) return
   49    this._didGlobal = true
   ..
  104  
  105    if (entry.ready === false) {
  106:     // console.error("-- entry is not ready", entry)
  107      me._buffer.unshift(entry)
  108      entry.on("ready", function () {
  109:       // console.error("-- -- ready!", entry)
  110        me._process()
  111      })
  ...
  174    }
  175  
  176:   // console.error("-- new writer", wprops)
  177    // if (!wprops.type) {
  178:   //   // console.error("-- no type?", entry.constructor.name, entry)
  179    // }
  180  
  181:   // console.error("-- -- set current to new writer", wprops.path)
  182    var writer = me._currentEntry = EntryWriter(wprops)
  183  
  ...
  185  
  186    // writer.on("end", function () {
  187:   //   // console.error("-- -- writer end", writer.path)
  188    // })
  189  
  ...
  196        return this.toString().split(/\0/).join(".")
  197      }
  198:     // console.error("-- -- writer header %j", writer.props)
  199      if (writer.props.size === 0) nextEntry()
  200    })
  ...
  206      ended = true
  207  
  208:     // console.error("-- -- writer close", writer.path)
  209:     // console.error("-- -- set current to null", wprops.path)
  210      me._currentEntry = null
  211      me._processing = false
  ...
  214  
  215    writer.on("error", function (er) {
  216:     // console.error("-- -- writer error", writer.path)
  217      me.emit("error", er)
  218    })
  ...
  221    // or data, since they'll be added directly.
  222    if (entry === me._pipeRoot) {
  223:     // console.error("-- is the root, don't auto-add")
  224      writer.add = null
  225    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/abstract.js:
   32      , er = decorate(msg, code, me)
   33    if (!me.listeners("warn")) {
   34:     console.error("%s %s\n" +
   35                    "path = %s\n" +
   36                    "syscall = %s\n" +

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/collect.js:
   33    // without a destination, then it'll re-play the events.
   34    stream.pipe = (function (orig) { return function (dest) {
   35:     // console.error(" === open the pipes", dest && dest.path)
   36  
   37      // let the entries flow through one at a time.
   ..
   40      ;(function unblockEntry () {
   41        var entry = entryBuffer[e++]
   42:       // console.error(" ==== unblock entry", entry && entry.path)
   43        if (!entry) return resume()
   44        entry.on("end", unblockEntry)

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/dir-reader.js:
   72  
   73    if (me._paused || me._currentEntry || me._aborted) {
   74:     // console.error("DR paused=%j, current=%j, aborted=%j", me._paused, !!me._currentEntry, me._aborted)
   75      return
   76    }
   ..
  110      var entry = Reader(childProps, stat)
  111  
  112:     // console.error("DR Entry", p, stat.size)
  113  
  114      me._currentEntry = entry
  ...
  140  
  141      entry.on("ready", function EMITCHILD () {
  142:       // console.error("DR emit child", entry._path)
  143        if (me._paused) {
  144:         // console.error("  DR emit child - try again later")
  145          // pause the child, and emit the "entry" event once we drain.
  146:         // console.error("DR pausing child entry")
  147          entry.pause(me)
  148          return me.once("resume", EMITCHILD)
  ...
  233  
  234    me._paused = false
  235:   // console.error("DR Emit Resume", me._path)
  236    me.emit("resume", who)
  237    if (me._paused) {
  238:     // console.error("DR Re-paused", me._path)
  239      return
  240    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/dir-writer.js:
   58    var me = this
   59  
   60:   // console.error("\tadd", entry._path, "->", me._path)
   61    collect(entry)
   62    if (!me.ready || me._currentEntry) {
   ..
   79    var me = this
   80  
   81:   // console.error("DW Process p=%j", me._processing, me.basename)
   82  
   83    if (me._processing) return
   ..
   85    var entry = me._buffer.shift()
   86    if (!entry) {
   87:     // console.error("DW Drain")
   88      me.emit("drain")
   89      if (me._ended) me._finish()
   ..
   92  
   93    me._processing = true
   94:   // console.error("DW Entry", entry._path)
   95  
   96    me.emit("entry", entry)
   ..
  104      if (pp === me.root._path || pp === me._path ||
  105          (pp && pp.indexOf(me._path) === 0)) {
  106:       // console.error("DW Exit (recursive)", entry.basename, me._path)
  107        me._processing = false
  108        if (entry._collected) entry.pipe()
  ...
  111    } while (p = p.parent)
  112  
  113:   // console.error("DW not recursive")
  114  
  115    // chop off the entry's root dir, replace with ours
  ...
  139    var child = me._currentChild = new Writer(props)
  140    child.on("ready", function () {
  141:     // console.error("DW Child Ready", child.type, child._path)
  142:     // console.error("  resuming", entry._path)
  143      entry.pipe(child)
  144      entry.resume()
  ...
  164      if (ended) return
  165      ended = true
  166:     // console.error("* DW Child end", child.basename)
  167      me._currentChild = null
  168      me._processing = false

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/file-reader.js:
   15  
   16  function FileReader (props) {
   17:   // console.error("    FR create", props.path, props.size, new Error().stack)
   18    var me = this
   19    if (!(me instanceof FileReader)) throw new Error(
   ..
   44  
   45    stream.on("data", function (c) {
   46:     // console.error("\t\t%d %s", c.length, me.basename)
   47      me._bytesEmitted += c.length
   48      // no point saving empty chunks
   ..
   56    stream.on("end", function () {
   57      if (me._paused || me._buffer.length) {
   58:       // console.error("FR Buffering End", me._path)
   59        me._buffer.push(EOF)
   60        me._read()
   ..
   72    stream.on("close", function () {
   73      if (me._paused || me._buffer.length) {
   74:       // console.error("FR Buffering Close", me._path)
   75        me._buffer.push(CLOSE)
   76        me._read()
   77      } else {
   78:       // console.error("FR close 1", me._path)
   79        me.emit("close")
   80      }
   ..
   86  FileReader.prototype._read = function () {
   87    var me = this
   88:   // console.error("FR _read", me._path)
   89    if (me._paused) {
   90:     // console.error("FR _read paused", me._path)
   91      return
   92    }
   93  
   94    if (!me._stream) {
   95:     // console.error("FR _getStream calling", me._path)
   96      return me._getStream()
   97    }
   ..
   99    // clear out the buffer, if there is one.
  100    if (me._buffer.length) {
  101:     // console.error("FR _read has buffer", me._buffer.length, me._path)
  102      var buf = me._buffer
  103      for (var i = 0, l = buf.length; i < l; i ++) {
  104        var c = buf[i]
  105        if (c === EOF) {
  106:         // console.error("FR Read emitting buffered end", me._path)
  107          me.emit("end")
  108        } else if (c === CLOSE) {
  109:         // console.error("FR Read emitting buffered close", me._path)
  110          me.emit("close")
  111        } else {
  112:         // console.error("FR Read emitting buffered data", me._path)
  113          me.emit("data", c)
  114        }
  115  
  116        if (me._paused) {
  117:         // console.error("FR Read Re-pausing at "+i, me._path)
  118          me._buffer = buf.slice(i)
  119          return
  ...
  122      me._buffer.length = 0
  123    }
  124:   // console.error("FR _read done")
  125    // that's about all there is to it.
  126  }
  ...
  128  FileReader.prototype.pause = function (who) {
  129    var me = this
  130:   // console.error("FR Pause", me._path)
  131    if (me._paused) return
  132    who = who || me
  ...
  138  FileReader.prototype.resume = function (who) {
  139    var me = this
  140:   // console.error("FR Resume", me._path)
  141    if (!me._paused) return
  142    who = who || me

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/file-writer.js:
   37  
   38    me._stream.on("open", function (fd) {
   39:     // console.error("FW open", me._buffer, me._path)
   40      me.ready = true
   41      me._buffer.forEach(function (c) {
   ..
   51  
   52    me._stream.on("close", function () {
   53:     // console.error("\n\nFW Stream Close", me._path, me.size)
   54      me._finish()
   55    })
   ..
   69  
   70    var ret = me._stream.write(c)
   71:   // console.error("\t-- fw wrote, _stream says", ret, me._stream._queue.length)
   72  
   73    // allow 2 buffered writes, because otherwise there's just too

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/link-writer.js:
   30  
   31  LinkWriter.prototype._create = function () {
   32:   // console.error(" LW _create")
   33    var me = this
   34      , hard = me.type === "Link" || process.platform === "win32"
   ..
   87  
   88  LinkWriter.prototype.end = function () {
   89:   // console.error("LW finish in end")
   90    this._ended = true
   91    if (this.ready) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/proxy-reader.js:
   66      , "stat"
   67      ].forEach(function (ev) {
   68:       // console.error("~~ proxy event", ev, me.path)
   69        proxy.on(ev, me.emit.bind(me, ev))
   70      })
   ..
   73  
   74    proxy.on("ready", function () {
   75:     // console.error("~~ proxy is ready!", me.path)
   76      me.ready = true
   77      me.emit("ready")

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/proxy-writer.js:
   50  
   51  ProxyWriter.prototype._addProxy = function (proxy) {
   52:   // console.error("~~ set proxy", this.path)
   53    var me = this
   54    if (me._proxy) {
   ..
   71    var calls = me._buffer
   72    calls.forEach(function (c) {
   73:     // console.error("~~ ~~ proxy buffered call", c[0], c[1])
   74      proxy[c[0]].apply(proxy, c[1])
   75    })
   ..
   79  
   80  ProxyWriter.prototype.add = function (entry) {
   81:   // console.error("~~ proxy add")
   82    collect(entry)
   83  
   ..
   91  
   92  ProxyWriter.prototype.write = function (c) {
   93:   // console.error("~~ proxy write")
   94    if (!this._proxy) {
   95      this._buffer.push(["write", [c]])
   ..
  101  
  102  ProxyWriter.prototype.end = function (c) {
  103:   // console.error("~~ proxy end")
  104    if (!this._proxy) {
  105      this._buffer.push(["end", [c]])

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/reader.js:
  119    props.parent = props.root = null
  120  
  121:   // console.error("\n\n\n%s setting size to", props.path, props.size)
  122    me.size = props.size
  123    me.filter = typeof props.filter === "function" ? props.filter : null
  ...
  127    // this will stat the thing, and then call me._read()
  128    // to start reading whatever it is.
  129:   // console.error("calling stat", props.path, currentStat)
  130    me._stat(currentStat)
  131  }
  ...
  144      , stat = props.follow ? "stat" : "lstat"
  145  
  146:   // console.error("Reader._stat", me._path, currentStat)
  147    if (currentStat) process.nextTick(statCb.bind(null, null, currentStat))
  148    else fs[stat](me._path, statCb)
  ...
  150  
  151    function statCb (er, props_) {
  152:     // console.error("Reader._stat, statCb", me._path, props_, props_.nlink)
  153      if (er) return me.error(er)
  154  
  ...
  167      if (type !== "Directory" && props.nlink && props.nlink > 1) {
  168        var k = props.dev + ":" + props.ino
  169:       // console.error("Reader has nlink", me._path, k)
  170        if (hardLinks[k] === me._path || !hardLinks[k]) hardLinks[k] = me._path
  171        else {
  ...
  174          me.Link = me.props.Link = true
  175          me.linkpath = me.props.linkpath = hardLinks[k]
  176:         // console.error("Hardlink detected, switching mode", me._path, me.linkpath)
  177          // Setting __proto__ would arguably be the "correct"
  178          // approach here, but that just seems too wrong.
  ...
  235    }
  236  
  237:   // console.error("R Pipe apply Stream Pipe")
  238    return Stream.prototype.pipe.apply(this, arguments)
  239  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/writer.js:
   85    props.parent = props.root = null
   86  
   87:   // console.error("\n\n\n%s setting size to", props.path, props.size)
   88    me.size = props.size
   89  
   ..
  163  
  164  function create (me) {
  165:   // console.error("W create", me._path, Writer.dirmode)
  166  
  167    // XXX Need to clobber non-dirs that are in the way,
  168    // unless { clobber: false } in the props.
  169    mkdir(path.dirname(me._path), Writer.dirmode, function (er, made) {
  170:     // console.error("W created", path.dirname(me._path), er)
  171      if (er) return me.error(er)
  172  
  ...
  247    var me = this
  248  
  249:   // console.error(" W Finish", me._path, me.size)
  250  
  251    // set up all the things.
  ...
  261      me._old.atime = new Date(0)
  262      me._old.mtime = new Date(0)
  263:     // console.error(" W Finish Stale Stat", me._path, me.size)
  264      setProps(me._old)
  265    } else {
  266      var stat = me.props.follow ? "stat" : "lstat"
  267:     // console.error(" W Finish Stating", me._path, me.size)
  268      fs[stat](me._path, function (er, current) {
  269:       // console.error(" W Finish Stated", me._path, me.size, current)
  270        if (er) {
  271          // if we're in the process of writing out a
  ...
  299    function next (what) {
  300      return function (er) {
  301:       // console.error("   W Finish", what, todo)
  302        if (errState) return
  303        if (er) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/nopt/lib/nopt.js:
    2  
    3  var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG
    4:   ? function () { console.error.apply(console, arguments) }
    5    : function () {}
    6  
    .
  538        , parsed = actual.argv
  539      delete actual.argv
  540:     console.log(util.inspect(actual, false, 2, true), parsed.remain)
  541      for (var i in opts) {
  542        var e = JSON.stringify(opts[i])

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/eventemitter2/lib/eventemitter2.js:
  193  
  194                tree._listeners.warned = true;
  195:               console.error('(node) warning: possible EventEmitter memory ' +
  196                              'leak detected. %d listeners added. ' +
  197                              'Use emitter.setMaxListeners() to increase limit.',
  198                              tree._listeners.length);
  199:               console.trace();
  200              }
  201            }
  ...
  385  
  386            this._events[type].warned = true;
  387:           console.error('(node) warning: possible EventEmitter memory ' +
  388                          'leak detected. %d listeners added. ' +
  389                          'Use emitter.setMaxListeners() to increase limit.',
  390                          this._events[type].length);
  391:           console.trace();
  392          }
  393        }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/arguments.js:
    1  var system = require('system');
    2  if (system.args.length === 1) {
    3:     console.log('Try to pass some args when invoking this script!');
    4  } else {
    5      system.args.forEach(function (arg, i) {
    6:             console.log(i + ': ' + arg);
    7      });
    8  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/child_process-examples.js:
    5  
    6  child.stdout.on("data", function (data) {
    7:   console.log("spawnSTDOUT:", JSON.stringify(data))
    8  })
    9  
   10  child.stderr.on("data", function (data) {
   11:   console.log("spawnSTDERR:", JSON.stringify(data))
   12  })
   13  
   14  child.on("exit", function (code) {
   15:   console.log("spawnEXIT:", code)
   16  })
   17  
   ..
   19  
   20  execFile("ls", ["-lF", "/usr"], null, function (err, stdout, stderr) {
   21:   console.log("execFileSTDOUT:", JSON.stringify(stdout))
   22:   console.log("execFileSTDERR:", JSON.stringify(stderr))
   23  })
   24  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/countdown.js:
    2      interval = setInterval(function(){
    3          if ( t > 0 ) {
    4:             console.log(t--);
    5          } else {
    6:             console.log("BLAST OFF!");
    7              phantom.exit();
    8          }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/detectsniff.js:
   34  
   35  if (system.args.length === 1) {
   36:     console.log('Usage: detectsniff.js <some URL>');
   37      phantom.exit(1);
   38  } else {
   39      address = system.args[1];
   40:     console.log('Checking ' + address + '...');
   41      page.open(address, function (status) {
   42          if (status !== 'success') {
   43:             console.log('FAIL to load the address');
   44              phantom.exit();
   45          } else {
   ..
   49                  });
   50                  if (sniffed) {
   51:                     console.log('The page tried to sniff the user agent.');
   52                  } else {
   53:                     console.log('The page did not try to sniff the user agent.');
   54                  }
   55                  phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/direction.js:
    6  
    7  if (system.args.length < 3) {
    8:     console.log('Usage: direction.js origin destination');
    9:     console.log('Example: direction.js "San Diego" "Palo Alto"');
   10      phantom.exit(1);
   11  } else {
   ..
   15                  '&destination=' + dest + '&units=imperial&mode=driving&sensor=false'), function (status) {
   16          if (status !== 'success') {
   17:             console.log('Unable to access network');
   18          } else {
   19              steps = page.content.match(/<html_instructions>(.*)<\/html_instructions>/ig);
   20              if (steps == null) {
   21:                 console.log('No data available for ' + origin + ' to ' + dest);
   22              } else {
   23                  steps.forEach(function (ins) {
   ..
   25                      ins = ins.replace(/\<div/ig, '\n<div');
   26                      ins = ins.replace(/<.*?>/g, '');
   27:                     console.log(ins);
   28                  });
   29:                 console.log('');
   30:                 console.log(page.content.match(/<copyrights>.*<\/copyrights>/ig).join('').replace(/<.*?>/g, ''));
   31              }
   32          }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/echoToFile.js:
    4  
    5  if (system.args.length < 3) {
    6:     console.log("Usage: echoToFile.js DESTINATION_FILE <arguments to echo...>");
    7      phantom.exit(1);
    8  } else {
    .
   17          fs.write(system.args[1], content, 'w');
   18      } catch(e) {
   19:         console.log(e);
   20      }
   21  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/features.js:
    2  
    3  phantom.injectJs('modernizr.js');
    4: console.log('Detected features (using Modernizr ' + Modernizr._version + '):');
    5  for (feature in Modernizr) {
    6      if (Modernizr.hasOwnProperty(feature)) {
    .
   16  }
   17  
   18: console.log('');
   19: console.log('Supported:');
   20  supported.forEach(function (e) {
   21:     console.log('  ' + e);
   22  });
   23  
   24: console.log('');
   25: console.log('Not supported:');
   26  unsupported.forEach(function (e) {
   27:     console.log('  ' + e);
   28  });
   29  phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/fibo.js:
    1  var fibs = [0, 1];
    2  var ticker = window.setInterval(function () {
    3:     console.log(fibs[fibs.length - 1]);
    4      fibs.push(fibs[fibs.length - 1] + fibs[fibs.length - 2]);
    5      if (fibs.length > 10) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/follow.js:
   14      page.open('http://mobile.twitter.com/' + user, function (status) {
   15          if (status === 'fail') {
   16:             console.log(user + ': ?');
   17          } else {
   18              var data = page.evaluate(function () {
   19                  return document.querySelector('div.profile td.stat.stat-last div.statnum').innerText;
   20              });
   21:             console.log(user + ': ' + data);
   22          }
   23          page.close();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/hello.js:
    1: console.log('Hello, world!');
    2  phantom.exit();
    3  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/imagebin.js:
    6  
    7  if (system.args.length !== 2) {
    8:     console.log('Usage: imagebin.js filename');
    9      phantom.exit(1);
   10  } else {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/injectme.js:
    4      var page = require('webpage').create();
    5  
    6:     // Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
    7      page.onConsoleMessage = function(msg) {
    8:         console.log(msg);
    9      };
   10      
   11      page.onAlert = function(msg) {
   12:         console.log(msg);
   13      };
   14      
   15:     console.log("* Script running in the Phantom context.");
   16:     console.log("* Script will 'inject' itself in a page...");
   17      page.open("about:blank", function(status) {
   18          if ( status === "success" ) {
   19:             console.log(page.injectJs("injectme.js") ? "... done injecting itself!" : "... fail! Check the $PWD?!");
   20          }
   21          phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/ipgeocode.js:
    5      if (data.region_name.length > 0)
    6          loc = loc + ', ' + data.region_name;
    7:     console.log('IP address: ' + data.ip);
    8:     console.log('Estimated location: ' + loc);
    9      phantom.exit();
   10  };

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/loadspeed.js:
    4  
    5  if (system.args.length === 1) {
    6:     console.log('Usage: loadspeed.js <some URL>');
    7      phantom.exit(1);
    8  } else {
    .
   11      page.open(address, function (status) {
   12          if (status !== 'success') {
   13:             console.log('FAIL to load the address');
   14          } else {
   15              t = Date.now() - t;
   16:             console.log('Page title is ' + page.evaluate(function () {
   17                  return document.title;
   18              }));
   19:             console.log('Loading time ' + t + ' msec');
   20          }
   21          phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/loadurlwithoutcss.js:
    3  
    4  if (system.args.length < 2) {
    5:     console.log('Usage: loadurlwithoutcss.js URL');
    6      phantom.exit();
    7  }
    .
   11  page.onResourceRequested = function(requestData, request) {
   12      if ((/http:\/\/.+?\.css/gi).test(requestData['url']) || requestData['Content-Type'] == 'text/css') {
   13:         console.log('The url of the request is matching. Aborting: ' + requestData['url']);
   14          request.abort();
   15      }
   ..
   20          phantom.exit();
   21      } else {
   22:         console.log('Unable to load the address!');
   23          phantom.exit();
   24      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/module.js:
    1  var universe = require('./universe');
    2  universe.start();
    3: console.log('The answer is' + universe.answer);
    4  phantom.exit();
    5  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/movies.js:
    5      var list = data.query.results.movie;
    6      list.forEach(function (item) {
    7:         console.log(item.title + ' [' + item.rating.MPAA.content + ']');
    8      });
    9      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/netlog.js:
    4  
    5  if (system.args.length === 1) {
    6:     console.log('Usage: netlog.js <some URL>');
    7      phantom.exit(1);
    8  } else {
    .
   10  
   11      page.onResourceRequested = function (req) {
   12:         console.log('requested: ' + JSON.stringify(req, undefined, 4));
   13      };
   14  
   15      page.onResourceReceived = function (res) {
   16:         console.log('received: ' + JSON.stringify(res, undefined, 4));
   17      };
   18  
   19      page.open(address, function (status) {
   20          if (status !== 'success') {
   21:             console.log('FAIL to load the address');
   22          }
   23          phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/netsniff.js:
   98  
   99  if (system.args.length === 1) {
  100:     console.log('Usage: netsniff.js <some URL>');
  101      phantom.exit(1);
  102  } else {
  ...
  129          var har;
  130          if (status !== 'success') {
  131:             console.log('FAIL to load the address');
  132              phantom.exit(1);
  133          } else {
  ...
  137              });
  138              har = createHAR(page.address, page.title, page.startTime, page.resources);
  139:             console.log(JSON.stringify(har, undefined, 4));
  140              phantom.exit();
  141          }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/outputEncoding.js:
    1  function helloWorld() {
    2: 	console.log(phantom.outputEncoding + ": こんにちは、世界！");
    3  }
    4  
    5: console.log("Using default encoding...");
    6  helloWorld();
    7  
    8: console.log("\nUsing other encodings...");
    9  
   10  var encodings = ["euc-jp", "sjis", "utf8", "System"];

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/page_events.js:
   33      var i, ilen;
   34      for (i = 0, ilen = arguments.length; i < ilen; ++i) {
   35:         console.log("    arguments[" + i + "] = " + JSON.stringify(arguments[i]));
   36      }
   37:     console.log("");
   38  }
   39  
   ..
   41  
   42  page.onInitialized = function() {
   43:     console.log("page.onInitialized");
   44      printArgs.apply(this, arguments);
   45  };
   46  page.onLoadStarted = function() {
   47:     console.log("page.onLoadStarted");
   48      printArgs.apply(this, arguments);
   49  };
   50  page.onLoadFinished = function() {
   51:     console.log("page.onLoadFinished");
   52      printArgs.apply(this, arguments);
   53  };
   54  page.onUrlChanged = function() {
   55:     console.log("page.onUrlChanged");
   56      printArgs.apply(this, arguments);
   57  };
   58  page.onNavigationRequested = function() {
   59:     console.log("page.onNavigationRequested");
   60      printArgs.apply(this, arguments);
   61  };
   ..
   63  if (logResources === true) {
   64      page.onResourceRequested = function() {
   65:         console.log("page.onResourceRequested");
   66          printArgs.apply(this, arguments);
   67      };
   68      page.onResourceReceived = function() {
   69:         console.log("page.onResourceReceived");
   70          printArgs.apply(this, arguments);
   71      };
   ..
   73  
   74  page.onClosing = function() {
   75:     console.log("page.onClosing");
   76      printArgs.apply(this, arguments);
   77  };
   78  
   79: // window.console.log(msg);
   80  page.onConsoleMessage = function() {
   81:     console.log("page.onConsoleMessage");
   82      printArgs.apply(this, arguments);
   83  };
   ..
   85  // window.alert(msg);
   86  page.onAlert = function() {
   87:     console.log("page.onAlert");
   88      printArgs.apply(this, arguments);
   89  };
   90  // var confirmed = window.confirm(msg);
   91  page.onConfirm = function() {
   92:     console.log("page.onConfirm");
   93      printArgs.apply(this, arguments);
   94  };
   95  // var user_value = window.prompt(msg, default_value);
   96  page.onPrompt = function() {
   97:     console.log("page.onPrompt");
   98      printArgs.apply(this, arguments);
   99  };
  ...
  102  
  103  setTimeout(function() {
  104:     console.log("");
  105:     console.log("### STEP 1: Load '" + step1url + "'");
  106      page.open(step1url);
  107  }, 0);
  108  
  109  setTimeout(function() {
  110:     console.log("");
  111:     console.log("### STEP 2: Load '" + step2url + "' (load same URL plus FRAGMENT)");
  112      page.open(step2url);
  113  }, 5000);
  114  
  115  setTimeout(function() {
  116:     console.log("");
  117:     console.log("### STEP 3: Click on page internal link (aka FRAGMENT)");
  118      page.evaluate(function() {
  119          var ev = document.createEvent("MouseEvents");
  ...
  124  
  125  setTimeout(function() {
  126:     console.log("");
  127:     console.log("### STEP 4: Click on page external link");
  128      page.evaluate(function() {
  129          var ev = document.createEvent("MouseEvents");
  ...
  134  
  135  setTimeout(function() {
  136:     console.log("");
  137:     console.log("### STEP 5: Close page and shutdown (with a delay)");
  138      page.close();
  139      setTimeout(function(){

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/pagecallback.js:
    1  var p = require("webpage").create();
    2  
    3: p.onConsoleMessage = function(msg) { console.log(msg); };
    4  
    5  // Calls to "callPhantom" within the page 'p' arrive here
    6  p.onCallback = function(msg) {
    7:     console.log("Received by the 'phantom' main context: "+msg);
    8      return "Hello there, I'm coming to you from the 'phantom' context instead";
    9  };
   ..
   12      // Return-value of the "onCallback" handler arrive here
   13      var callbackResponse = window.callPhantom("Hello, I'm coming to you from the 'page' context");
   14:     console.log("Received by the 'page' context: "+callbackResponse);
   15  });
   16  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/phantomwebintro.js:
    4  
    5  page.onConsoleMessage = function(msg) {
    6:     console.log(msg);
    7  };
    8  
    .
   11          page.includeJs("http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js", function() {
   12              page.evaluate(function() {
   13:                 console.log("$(\"#intro\").text() -> " + $("#intro").text());
   14              });
   15              phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/pizza.js:
    6  page.open(url, function (status) {
    7      if (status !== 'success') {
    8:         console.log('Unable to access network');
    9      } else {
   10          var results = page.evaluate(function() {
   ..
   15              return pizza;
   16          });
   17:         console.log(results.join('\n'));
   18      }
   19      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/post.js:
    7  page.open(server, 'post', data, function (status) {
    8      if (status !== 'success') {
    9:         console.log('Unable to post!');
   10      } else {
   11:         console.log(page.content);
   12      }
   13      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/postserver.js:
    7  
    8  if (system.args.length !== 2) {
    9:     console.log('Usage: postserver.js <portnumber>');
   10      phantom.exit(1);
   11  }
   ..
   14  
   15  service = server.listen(port, function (request, response) {
   16:     console.log('Request received at ' + new Date());
   17  
   18      response.statusCode = 200;
   ..
   27  page.open('http://localhost:' + port + '/', 'post', data, function (status) {
   28      if (status !== 'success') {
   29:         console.log('Unable to post!');
   30      } else {
   31:         console.log(page.plainText);
   32      }
   33      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/printenv.js:
    5  for (key in env) {
    6      if (env.hasOwnProperty(key)) {
    7:         console.log(key + '=' + env[key]);
    8      }
    9  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/printheaderfooter.js:
    7  
    8  if (system.args.length < 3) {
    9:     console.log('Usage: printheaderfooter.js URL filename');
   10      phantom.exit(1);
   11  } else {
   ..
   38      page.open(address, function (status) {
   39          if (status !== 'success') {
   40:             console.log('Unable to load the address!');
   41          } else {
   42              /* check whether the loaded page overwrites the header/footer setting,
   ..
   78                  });
   79                  page.paperSize = paperSize;
   80:                 console.log(page.paperSize.header.height);
   81:                 console.log(page.paperSize.footer.height);
   82              }
   83              window.setTimeout(function () {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/printmargins.js:
    3  
    4  if (system.args.length < 7) {
    5:     console.log('Usage: printmargins.js URL filename LEFT TOP RIGHT BOTTOM');
    6:     console.log('  margin examples: "1cm", "10px", "7mm", "5in"');
    7      phantom.exit(1);
    8  } else {
    .
   25      page.open(address, function (status) {
   26          if (status !== 'success') {
   27:             console.log('Unable to load the address!');
   28          } else {
   29              window.setTimeout(function () {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/rasterize.js:
    4  
    5  if (system.args.length < 3 || system.args.length > 5) {
    6:     console.log('Usage: rasterize.js URL filename [paperwidth*paperheight|paperformat] [zoom]');
    7:     console.log('  paper (pdf output) examples: "5in*7.5in", "10cm*20cm", "A4", "Letter"');
    8      phantom.exit(1);
    9  } else {
   ..
   21      page.open(address, function (status) {
   22          if (status !== 'success') {
   23:             console.log('Unable to load the address!');
   24              phantom.exit();
   25          } else {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/render_multi_url.js:
   59      arrayOfUrls = Array.prototype.slice.call(system.args, 1);
   60  } else {
   61:     console.log("Usage: phantomjs render_multi_url.js [domain.name1, domain.name2, ...]");
   62      arrayOfUrls = ["www.google.com", "www.bbc.co.uk", "www.phantomjs.org"];
   63  }
   ..
   65  RenderUrlsToFile(arrayOfUrls, (function(status, url, file) {
   66      if (status !== "success") {
   67:         return console.log("Unable to render '" + url + "'");
   68      } else {
   69:         return console.log("Rendered '" + url + "' at '" + file + "'");
   70      }
   71  }), function() {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/run-jasmine.js:
   24                  if(!condition) {
   25                      // If condition still not fulfilled (timeout but condition is 'false')
   26:                     console.log("'waitFor()' timeout");
   27                      phantom.exit(1);
   28                  } else {
   29                      // Condition fulfilled (timeout and/or condition is 'true')
   30:                     console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
   31                      typeof(onReady) === "string" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled
   32                      clearInterval(interval); //< Stop this interval
   ..
   38  
   39  if (system.args.length !== 2) {
   40:     console.log('Usage: run-jasmine.js URL');
   41      phantom.exit(1);
   42  }
   ..
   44  var page = require('webpage').create();
   45  
   46: // Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
   47  page.onConsoleMessage = function(msg) {
   48:     console.log(msg);
   49  };
   50  
   51  page.open(system.args[1], function(status){
   52      if (status !== "success") {
   53:         console.log("Unable to access network");
   54          phantom.exit();
   55      } else {
   ..
   60          }, function(){
   61              var exitCode = page.evaluate(function(){
   62:                 console.log('');
   63:                 console.log(document.body.querySelector('.description').innerText);
   64                  var list = document.body.querySelectorAll('.results > #details > .specDetail.failed');
   65                  if (list && list.length > 0) {
   66:                   console.log('');
   67:                   console.log(list.length + ' test(s) FAILED:');
   68                    for (i = 0; i < list.length; ++i) {
   69                        var el = list[i],
   70                            desc = el.querySelector('.description'),
   71                            msg = el.querySelector('.resultMessage.fail');
   72:                       console.log('');
   73:                       console.log(desc.innerText);
   74:                       console.log(msg.innerText);
   75:                       console.log('');
   76                    }
   77                    return 1;
   78                  } else {
   79:                   console.log(document.body.querySelector('.alert > .passingAlert.bar').innerText);
   80                    return 0;
   81                  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/run-qunit.js:
   24                  if(!condition) {
   25                      // If condition still not fulfilled (timeout but condition is 'false')
   26:                     console.log("'waitFor()' timeout");
   27                      phantom.exit(1);
   28                  } else {
   29                      // Condition fulfilled (timeout and/or condition is 'true')
   30:                     console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
   31                      typeof(onReady) === "string" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled
   32                      clearInterval(interval); //< Stop this interval
   ..
   38  
   39  if (system.args.length !== 2) {
   40:     console.log('Usage: run-qunit.js URL');
   41      phantom.exit(1);
   42  }
   ..
   44  var page = require('webpage').create();
   45  
   46: // Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
   47  page.onConsoleMessage = function(msg) {
   48:     console.log(msg);
   49  };
   50  
   51  page.open(system.args[1], function(status){
   52      if (status !== "success") {
   53:         console.log("Unable to access network");
   54          phantom.exit(1);
   55      } else {
   ..
   65              var failedNum = page.evaluate(function(){
   66                  var el = document.getElementById('qunit-testresult');
   67:                 console.log(el.innerText);
   68                  try {
   69                      return el.getElementsByClassName('failed')[0].innerHTML;

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/scandir.js:
    3  
    4  if (system.args.length !== 2) {
    5:     console.log("Usage: phantomjs scandir.js DIRECTORY_TO_SCAN");
    6      phantom.exit(1);
    7  }
    .
   10      var fs = require('fs');
   11      if (fs.exists(path) && fs.isFile(path)) {
   12:         console.log(path);
   13      } else if (fs.isDirectory(path)) {
   14          fs.list(path).forEach(function (e) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/seasonfood.js:
    8                   'October', 'November', 'December'];
    9      list.forEach(function (item) {
   10:         console.log([item.name.replace(/\s/ig, ' '), ':',
   11                    names[item.atItsBestUntil], 'to',
   12                    names[item.atItsBestFrom]].join(' '));

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/server.js:
    5  
    6  if (system.args.length !== 2) {
    7:     console.log('Usage: server.js <some port>');
    8      phantom.exit(1);
    9  } else {
   10      port = system.args[1];
   11      var listening = server.listen(port, function (request, response) {
   12:         console.log("GOT HTTP REQUEST");
   13:         console.log(JSON.stringify(request, null, 4));
   14  
   15          // we set the headers here
   ..
   26      });
   27      if (!listening) {
   28:         console.log("could not create web server listening on port " + port);
   29          phantom.exit();
   30      }
   31      var url = "http://localhost:" + port + "/foo/bar.php?asdf=true";
   32:     console.log("SENDING REQUEST TO:");
   33:     console.log(url);
   34      page.open(url, function (status) {
   35          if (status !== 'success') {
   36:             console.log('FAIL to load the address');
   37          } else {
   38:             console.log("GOT REPLY FROM SERVER:");
   39:             console.log(page.content);
   40          }
   41          phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/serverkeepalive.js:
    3  
    4  if (system.args.length !== 2) {
    5:     console.log('Usage: serverkeepalive.js <portnumber>');
    6      phantom.exit(1);
    7  } else {
    .
   10  
   11      service = server.listen(port, { keepAlive: true }, function (request, response) {
   12:         console.log('Request at ' + new Date());
   13:         console.log(JSON.stringify(request, null, 4));
   14  
   15          var body = JSON.stringify(request, null, 4);
   ..
   27  
   28      if (service) {
   29:         console.log('Web server running on port ' + port);
   30      } else {
   31:         console.log('Error: Could not create web server listening on port ' + port);
   32          phantom.exit();
   33      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/simpleserver.js:
    3  
    4  if (system.args.length !== 2) {
    5:     console.log('Usage: simpleserver.js <portnumber>');
    6      phantom.exit(1);
    7  } else {
    .
   11      service = server.listen(port, function (request, response) {
   12  
   13:         console.log('Request at ' + new Date());
   14:         console.log(JSON.stringify(request, null, 4));
   15  
   16          response.statusCode = 200;
   ..
   35  
   36      if (service) {
   37:         console.log('Web server running on port ' + port);
   38      } else {
   39:         console.log('Error: Could not create web server listening on port ' + port);
   40          phantom.exit();
   41      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/sleepsort.js:
    8          setTimeout((function(j){
    9              return function() {
   10:                 console.log(array[j]);
   11                  ++sortedCount;
   12                  (len === sortedCount) && callback();
   ..
   17  
   18  if ( system.args < 2 ) {
   19:     console.log("Usage: phantomjs sleepsort.js PUT YOUR INTEGERS HERE SEPARATED BY SPACES");
   20      phantom.exit(1);
   21  } else {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/technews.js:
    3  page.open('http://news.google.com/news/i/section?&topic=t', function (status) {
    4      if (status !== 'success') {
    5:         console.log('Unable to access the network!');
    6      } else {
    7          page.evaluate(function () {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/tweets.js:
    5      twitterId = "PhantomJS"; //< default value
    6  
    7: // Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
    8  page.onConsoleMessage = function(msg) {
    9:     console.log(msg);
   10  };
   11  
   12  // Print usage message, if no twitter ID is passed
   13  if (system.args.length < 2) {
   14:     console.log("Usage: tweets.js [twitter ID]");
   15  } else {
   16      twitterId = system.args[1];
   ..
   18  
   19  // Heading
   20: console.log("*** Latest tweets from @" + twitterId + " ***\n");
   21  
   22  // Open Twitter Mobile and, onPageLoad, do...
   ..
   24      // Check for page load success
   25      if (status !== "success") {
   26:         console.log("Unable to access network");
   27      } else {
   28          // Execute some DOM inspection within the page context
   ..
   30              var list = document.querySelectorAll('div.tweet-text');
   31              for (var i = 0; i < list.length; ++i) {
   32:                 console.log((i + 1) + ": " + list[i].innerText);
   33              }
   34          });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/universe.js:
    6  
    7  exports.start = function () {
    8:     console.log('Starting the universe....');
    9  }
   10  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/unrandomize.js:
   15      var result;
   16      if (status !== 'success') {
   17:         console.log('Network error.');
   18      } else {
   19:         console.log(page.evaluate(function () {
   20              return document.getElementById('numbers').textContent;
   21          }));

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/useragent.js:
    1  var page = require('webpage').create();
    2: console.log('The default user agent is ' + page.settings.userAgent);
    3  page.settings.userAgent = 'SpecialAgent';
    4  page.open('http://www.httpuseragent.org', function (status) {
    5      if (status !== 'success') {
    6:         console.log('Unable to access network');
    7      } else {
    8          var ua = page.evaluate(function () {
    9              return document.getElementById('myagent').innerText;
   10          });
   11:         console.log(ua);
   12      }
   13      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/version.js:
    1: console.log('using PhantomJS version ' +
    2    phantom.version.major + '.' +
    3    phantom.version.minor + '.' +

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/waitfor.js:
   22                  if(!condition) {
   23                      // If condition still not fulfilled (timeout but condition is 'false')
   24:                     console.log("'waitFor()' timeout");
   25                      phantom.exit(1);
   26                  } else {
   27                      // Condition fulfilled (timeout and/or condition is 'true')
   28:                     console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
   29                      typeof(onReady) === "string" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled
   30                      clearInterval(interval); //< Stop this interval
   ..
   41      // Check for page load success
   42      if (status !== "success") {
   43:         console.log("Unable to access network");
   44      } else {
   45          // Wait for 'signin-dropdown' to be visible
   ..
   50              });
   51          }, function() {
   52:            console.log("The sign-in dialog should be visible now.");
   53             phantom.exit();
   54          });        

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/walk_through_frames.js:
   14  
   15  p.open("../test/webpage-spec-frames/index.html", function(status) {
   16:     console.log("pageTitle(): " + pageTitle(p));
   17:     console.log("currentFrameName(): "+p.currentFrameName());
   18:     console.log("childFramesCount(): "+p.childFramesCount());
   19:     console.log("childFramesName(): "+p.childFramesName());
   20:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   21:     console.log("");
   22  
   23:     console.log("p.switchToChildFrame(\"frame1\"): "+p.switchToChildFrame("frame1"));
   24:     console.log("pageTitle(): " + pageTitle(p));
   25:     console.log("currentFrameName(): "+p.currentFrameName());
   26:     console.log("childFramesCount(): "+p.childFramesCount());
   27:     console.log("childFramesName(): "+p.childFramesName());
   28:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   29:     console.log("");
   30  
   31:     console.log("p.switchToChildFrame(\"frame1-2\"): "+p.switchToChildFrame("frame1-2"));
   32:     console.log("pageTitle(): " + pageTitle(p));
   33:     console.log("currentFrameName(): "+p.currentFrameName());
   34:     console.log("childFramesCount(): "+p.childFramesCount());
   35:     console.log("childFramesName(): "+p.childFramesName());
   36:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   37:     console.log("");
   38  
   39:     console.log("p.switchToParentFrame(): "+p.switchToParentFrame());
   40:     console.log("pageTitle(): " + pageTitle(p));
   41:     console.log("currentFrameName(): "+p.currentFrameName());
   42:     console.log("childFramesCount(): "+p.childFramesCount());
   43:     console.log("childFramesName(): "+p.childFramesName());
   44:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   45:     console.log("");
   46  
   47:     console.log("p.switchToChildFrame(0): "+p.switchToChildFrame(0));
   48:     console.log("pageTitle(): " + pageTitle(p));
   49:     console.log("currentFrameName(): "+p.currentFrameName());
   50:     console.log("childFramesCount(): "+p.childFramesCount());
   51:     console.log("childFramesName(): "+p.childFramesName());
   52:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   53:     console.log("");
   54  
   55:     console.log("p.switchToMainFrame()"); p.switchToMainFrame();
   56:     console.log("pageTitle(): " + pageTitle(p));
   57:     console.log("currentFrameName(): "+p.currentFrameName());
   58:     console.log("childFramesCount(): "+p.childFramesCount());
   59:     console.log("childFramesName(): "+p.childFramesName());
   60:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   61:     console.log("");
   62  
   63:     console.log("p.switchToChildFrame(\"frame2\"): "+p.switchToChildFrame("frame2"));
   64:     console.log("pageTitle(): " + pageTitle(p));
   65:     console.log("currentFrameName(): "+p.currentFrameName());
   66:     console.log("childFramesCount(): "+p.childFramesCount());
   67:     console.log("childFramesName(): "+p.childFramesName());
   68:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   69:     console.log("");
   70  
   71      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/weather.js:
   10  url = encodeURI('http://api.openweathermap.org/data/2.1/find/name?q=' + city);
   11  
   12: console.log('Checking weather condition for', city, '...');
   13  
   14  page.open(url, function(status) {
   15      var result, data;
   16      if (status !== 'success') {
   17:         console.log('Error: Unable to access network!');
   18      } else {
   19          result = page.evaluate(function () {
   ..
   23              data = JSON.parse(result);
   24              data = data.list[0];
   25:             console.log('');
   26:             console.log('City:', data.name);
   27:             console.log('Condition:', data.weather.map(function(entry) {
   28                  return entry.main;
   29              }).join(', '));
   30:             console.log('Temperature:', Math.round(data.main.temp - 273.15), 'C');
   31:             console.log('Humidity:', Math.round(data.main.humidity), '%');
   32          } catch (e) {
   33:             console.log('Error:', e.toString());
   34          }
   35      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/npmconf/node_modules/nopt/lib/nopt.js:
    2  
    3  var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG
    4:   ? function () { console.error.apply(console, arguments) }
    5    : function () {}
    6  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/lib/debug.js:
    4  function debug () {
    5    if (/\brequest\b/.test(process.env.NODE_DEBUG))
    6:     console.error('REQUEST %s', util.format.apply(util, arguments))
    7  }
    8  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/node_modules/form-data/node_modules/async/lib/async.js:
    7   */
    8  /*jshint onevar: false, indent:4 */
    9: /*global setImmediate: false, setTimeout: false, console: false */
   10  (function () {
   11  
   ..
  966      };
  967  
  968:     var _console_fn = function (name) {
  969          return function (fn) {
  970              var args = Array.prototype.slice.call(arguments, 1);
  971              fn.apply(null, args.concat([function (err) {
  972                  var args = Array.prototype.slice.call(arguments, 1);
  973:                 if (typeof console !== 'undefined') {
  974                      if (err) {
  975:                         if (console.error) {
  976:                             console.error(err);
  977                          }
  978                      }
  979:                     else if (console[name]) {
  980                          _each(args, function (x) {
  981:                             console[name](x);
  982                          });
  983                      }
  ...
  986          };
  987      };
  988:     async.log = _console_fn('log');
  989:     async.dir = _console_fn('dir');
  990:     /*async.info = _console_fn('info');
  991:     async.warn = _console_fn('warn');
  992:     async.error = _console_fn('error');*/
  993  
  994      async.memoize = function (fn, hasher) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/node_modules/hawk/node_modules/hoek/lib/index.js:
  364          stack = exports.displayStack(1).join('\n\t');
  365      }
  366:     console.log('ABORT: ' + message + '\n\t' + stack);
  367      process.exit(1);
  368  };
  ...
  538  */
  539  
  540: exports.consoleFunc = console.log;
  541  
  542  exports.printEvent = function (event) {
  ...
  569  
  570      var output = timestring + ', ' + event.tags[0] + ', ' + data;
  571:     exports.consoleFunc(output);
  572  };
  573  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/node_modules/http-signature/lib/util.js:
  143      y = tmp.data;
  144    } catch (e) {
  145:     console.log(e.stack);
  146      throw new Error('Invalid ssh key: ' + key);
  147    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/node_modules/tough-cookie/lib/cookie.js:
   30    punycode = require('punycode');
   31  } catch(e) {
   32:   console.warn("cookie: can't load punycode; won't use punycode for domain normalization");
   33  }
   34  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/mocha.js:
  132      if (!_reporter) try { _reporter = require(reporter); } catch (err) {};
  133      if (!_reporter && reporter === 'teamcity')
  134:       console.warn('The Teamcity reporter was moved to a package named ' +
  135          'mocha-teamcity-reporter ' +
  136          '(https://npmjs.org/package/mocha-teamcity-reporter).');

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/base.js:
  156  
  157  exports.list = function(failures){
  158:   console.error();
  159    failures.forEach(function(test, i){
  160      // format
  ...
  202        .replace(/^/gm, '  ');
  203  
  204:     console.error(fmt, (i + 1), test.fullTitle(), msg, stack);
  205    });
  206  };
  ...
  284    var fmt;
  285  
  286:   console.log();
  287  
  288    // passes
  ...
  291      + color('light', ' (%s)');
  292  
  293:   console.log(fmt,
  294      stats.passes || 0,
  295      ms(stats.duration));
  ...
  300        + color('pending', ' %d pending');
  301  
  302:     console.log(fmt, stats.pending);
  303    }
  304  
  ...
  307      fmt = color('fail', '  %d failing');
  308  
  309:     console.error(fmt,
  310        stats.failures);
  311  
  312      Base.list(this.failures);
  313:     console.error();
  314    }
  315  
  316:   console.log();
  317  };
  318  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/doc.js:
   35      if (suite.root) return;
   36      ++indents;
   37:     console.log('%s<section class="suite">', indent());
   38      ++indents;
   39:     console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));
   40:     console.log('%s<dl>', indent());
   41    });
   42  
   43    runner.on('suite end', function(suite){
   44      if (suite.root) return;
   45:     console.log('%s</dl>', indent());
   46      --indents;
   47:     console.log('%s</section>', indent());
   48      --indents;
   49    });
   50  
   51    runner.on('pass', function(test){
   52:     console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));
   53      var code = utils.escape(utils.clean(test.fn.toString()));
   54:     console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);
   55    });
   56  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/dot.js:
   51  
   52    runner.on('end', function(){
   53:     console.log();
   54      self.epilogue();
   55    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/json-stream.js:
   28  
   29    runner.on('start', function(){
   30:     console.log(JSON.stringify(['start', { total: total }]));
   31    });
   32  
   33    runner.on('pass', function(test){
   34:     console.log(JSON.stringify(['pass', clean(test)]));
   35    });
   36  
   37    runner.on('fail', function(test, err){
   38:     console.log(JSON.stringify(['fail', clean(test)]));
   39    });
   40  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/landing.js:
   86    runner.on('end', function(){
   87      cursor.show();
   88:     console.log();
   89      self.epilogue();
   90    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/list.js:
   29  
   30    runner.on('start', function(){
   31:     console.log();
   32    });
   33  
   ..
   39      var fmt = color('checkmark', '  -')
   40        + color('pending', ' %s');
   41:     console.log(fmt, test.fullTitle());
   42    });
   43  
   ..
   47        + color(test.speed, '%dms');
   48      cursor.CR();
   49:     console.log(fmt, test.fullTitle(), test.duration);
   50    });
   51  
   52    runner.on('fail', function(test, err){
   53      cursor.CR();
   54:     console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());
   55    });
   56  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/progress.js:
   48    // tests started
   49    runner.on('start', function(){
   50:     console.log();
   51      cursor.hide();
   52    });
   ..
   75    runner.on('end', function(){
   76      cursor.show();
   77:     console.log();
   78      self.epilogue();
   79    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/spec.js:
   34  
   35    runner.on('start', function(){
   36:     console.log();
   37    });
   38  
   39    runner.on('suite', function(suite){
   40      ++indents;
   41:     console.log(color('suite', '%s%s'), indent(), suite.title);
   42    });
   43  
   44    runner.on('suite end', function(suite){
   45      --indents;
   46:     if (1 == indents) console.log();
   47    });
   48  
   49    runner.on('pending', function(test){
   50      var fmt = indent() + color('pending', '  - %s');
   51:     console.log(fmt, test.title);
   52    });
   53  
   ..
   58          + color('pass', ' %s ');
   59        cursor.CR();
   60:       console.log(fmt, test.title);
   61      } else {
   62        var fmt = indent()
   ..
   65          + color(test.speed, '(%dms)');
   66        cursor.CR();
   67:       console.log(fmt, test.title, test.duration);
   68      }
   69    });
   ..
   71    runner.on('fail', function(test, err){
   72      cursor.CR();
   73:     console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
   74    });
   75  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/tap.js:
   32    runner.on('start', function(){
   33      var total = runner.grepTotal(runner.suite);
   34:     console.log('%d..%d', 1, total);
   35    });
   36  
   ..
   40  
   41    runner.on('pending', function(test){
   42:     console.log('ok %d %s # SKIP -', n, title(test));
   43    });
   44  
   45    runner.on('pass', function(test){
   46      passes++;
   47:     console.log('ok %d %s', n, title(test));
   48    });
   49  
   50    runner.on('fail', function(test, err){
   51      failures++;
   52:     console.log('not ok %d %s', n, title(test));
   53:     if (err.stack) console.log(err.stack.replace(/^/gm, '  '));
   54    });
   55  
   56    runner.on('end', function(){
   57:     console.log('# tests ' + (passes + failures));
   58:     console.log('# pass ' + passes);
   59:     console.log('# fail ' + failures);
   60    });
   61  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/xunit.js:
   50  
   51    runner.on('end', function(){
   52:     console.log(tag('testsuite', {
   53          name: 'Mocha Tests'
   54        , tests: stats.tests
   ..
   61  
   62      tests.forEach(test);
   63:     console.log('</testsuite>');
   64    });
   65  }
   ..
   85      var err = test.err;
   86      attrs.message = escape(err.message);
   87:     console.log(tag('testcase', attrs, false, tag('failure', attrs, false, cdata(err.stack))));
   88    } else if (test.pending) {
   89:     console.log(tag('testcase', attrs, false, tag('skipped', {}, true)));
   90    } else {
   91:     console.log(tag('testcase', attrs, true) );
   92    }
   93  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/node_modules/debug/lib/debug.js:
  109        + ' +' + humanize(ms) + '\u001b[0m';
  110  
  111:     console.log.apply(this, arguments);
  112    }
  113  
  ...
  117      fmt = new Date().toUTCString()
  118        + ' ' + name + ' ' + fmt;
  119:     console.log.apply(this, arguments);
  120    }
  121  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/node_modules/jade/lib/jade.js:
  103      // Debug compiler
  104      if (options.debug) {
  105:       console.error('\nCompiled Function:\n\n\033[90m%s\033[0m', js.replace(/^/gm, '  '));
  106      }
  107  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/node_modules/jade/node_modules/commander/lib/commander.js:
  122   *        .description('run remote setup commands')
  123   *        .action(function(){
  124:  *          console.log('setup');
  125   *        });
  126   *     
  ...
  129   *        .description('run the given remote command')
  130   *        .action(function(cmd){
  131:  *          console.log('exec "%s"', cmd);
  132   *        });
  133   *     
  ...
  136   *        .description('deploy the given env')
  137   *        .action(function(env){
  138:  *          console.log('deploying "%s"', env);
  139   *        });
  140   *     
  ...
  518  
  519  Command.prototype.missingArgument = function(name){
  520:   console.error();
  521:   console.error("  error: missing required argument `%s'", name);
  522:   console.error();
  523    process.exit(1);
  524  };
  ...
  533  
  534  Command.prototype.optionMissingArgument = function(option, flag){
  535:   console.error();
  536    if (flag) {
  537:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  538    } else {
  539:     console.error("  error: option `%s' argument missing", option.flags);
  540    }
  541:   console.error();
  542    process.exit(1);
  543  };
  ...
  551  
  552  Command.prototype.unknownOption = function(flag){
  553:   console.error();
  554:   console.error("  error: unknown option `%s'", flag);
  555:   console.error();
  556    process.exit(1);
  557  };
  ...
  575    this.option(flags, 'output the version number');
  576    this.on('version', function(){
  577:     console.log(str);
  578      process.exit(0);
  579    });
  ...
  768  Command.prototype.promptMultiLine = function(str, fn){
  769    var buf = [];
  770:   console.log(str);
  771    process.stdin.setEncoding('utf8');
  772    process.stdin.on('data', function(val){
  ...
  792   *
  793   *     program.prompt('Username: ', function(name){
  794:  *       console.log('hi %s', name);
  795   *     });
  796   *     
  797   *     program.prompt('Description:', function(desc){
  798:  *       console.log('description was "%s"', desc.trim());
  799   *     });
  800   *
  ...
  838   *
  839   *     program.password('Password: ', function(pass){
  840:  *       console.log('got "%s"', pass);
  841   *       process.stdin.destroy();
  842   *     });
  843   *
  844   *     program.password('Password: ', '*', function(pass){
  845:  *       console.log('got "%s"', pass);
  846   *       process.stdin.destroy();
  847   *     });
  ...
  870    process.stdin.on('keypress', function(c, key){
  871      if (key && 'enter' == key.name) {
  872:       console.log();
  873        process.stdin.removeAllListeners('keypress');
  874        tty.setRawMode(false);
  ...
  879  
  880      if (key && key.ctrl && 'c' == key.name) {
  881:       console.log('%s', buf);
  882        process.exit();
  883      }
  ...
  894   *
  895   *      program.confirm('continue? ', function(ok){
  896:  *        console.log(' got %j', ok);
  897   *        process.stdin.destroy();
  898   *      });
  ...
  922   *      var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];
  923   *      
  924:  *      console.log('Choose the coolest pet:');
  925   *      program.choose(list, function(i){
  926:  *        console.log('you chose %d "%s"', i, list[i]);
  927   *        process.stdin.destroy();
  928   *      });
  ...
  945    list.forEach(function(item, i){
  946      if (hasDefault && i == index) {
  947:       console.log('* %d) %s', i + 1, item);
  948      } else {
  949:       console.log('  %d) %s', i + 1, item);
  950      }
  951    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/fs-extra/lib/index.js:
   78  //deprecated
   79  fs.touch = function touch() {
   80:   console.log('fs.touch() is deprecated. Please use fs.createFile().')
   81    fs.createFile.apply(null, arguments)
   82  }
   83  
   84  fs.touchSync = function touchSync() {
   85:   console.log('fs.touchSync() is deprecated. Please use fs.createFileSync().')
   86    fs.createFileSync.apply(null, arguments)
   87  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/mocha.js:
  132      if (!_reporter) try { _reporter = require(reporter); } catch (err) {};
  133      if (!_reporter && reporter === 'teamcity')
  134:       console.warn('The Teamcity reporter was moved to a package named ' +
  135          'mocha-teamcity-reporter ' +
  136          '(https://npmjs.org/package/mocha-teamcity-reporter).');

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/base.js:
  156  
  157  exports.list = function(failures){
  158:   console.error();
  159    failures.forEach(function(test, i){
  160      // format
  ...
  202        .replace(/^/gm, '  ');
  203  
  204:     console.error(fmt, (i + 1), test.fullTitle(), msg, stack);
  205    });
  206  };
  ...
  284    var fmt;
  285  
  286:   console.log();
  287  
  288    // passes
  ...
  291      + color('light', ' (%s)');
  292  
  293:   console.log(fmt,
  294      stats.passes || 0,
  295      ms(stats.duration));
  ...
  300        + color('pending', ' %d pending');
  301  
  302:     console.log(fmt, stats.pending);
  303    }
  304  
  ...
  307      fmt = color('fail', '  %d failing');
  308  
  309:     console.error(fmt,
  310        stats.failures);
  311  
  312      Base.list(this.failures);
  313:     console.error();
  314    }
  315  
  316:   console.log();
  317  };
  318  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/doc.js:
   35      if (suite.root) return;
   36      ++indents;
   37:     console.log('%s<section class="suite">', indent());
   38      ++indents;
   39:     console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));
   40:     console.log('%s<dl>', indent());
   41    });
   42  
   43    runner.on('suite end', function(suite){
   44      if (suite.root) return;
   45:     console.log('%s</dl>', indent());
   46      --indents;
   47:     console.log('%s</section>', indent());
   48      --indents;
   49    });
   50  
   51    runner.on('pass', function(test){
   52:     console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));
   53      var code = utils.escape(utils.clean(test.fn.toString()));
   54:     console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);
   55    });
   56  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/dot.js:
   51  
   52    runner.on('end', function(){
   53:     console.log();
   54      self.epilogue();
   55    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/json-stream.js:
   28  
   29    runner.on('start', function(){
   30:     console.log(JSON.stringify(['start', { total: total }]));
   31    });
   32  
   33    runner.on('pass', function(test){
   34:     console.log(JSON.stringify(['pass', clean(test)]));
   35    });
   36  
   37    runner.on('fail', function(test, err){
   38:     console.log(JSON.stringify(['fail', clean(test)]));
   39    });
   40  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/landing.js:
   86    runner.on('end', function(){
   87      cursor.show();
   88:     console.log();
   89      self.epilogue();
   90    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/list.js:
   29  
   30    runner.on('start', function(){
   31:     console.log();
   32    });
   33  
   ..
   39      var fmt = color('checkmark', '  -')
   40        + color('pending', ' %s');
   41:     console.log(fmt, test.fullTitle());
   42    });
   43  
   ..
   47        + color(test.speed, '%dms');
   48      cursor.CR();
   49:     console.log(fmt, test.fullTitle(), test.duration);
   50    });
   51  
   52    runner.on('fail', function(test, err){
   53      cursor.CR();
   54:     console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());
   55    });
   56  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/progress.js:
   48    // tests started
   49    runner.on('start', function(){
   50:     console.log();
   51      cursor.hide();
   52    });
   ..
   75    runner.on('end', function(){
   76      cursor.show();
   77:     console.log();
   78      self.epilogue();
   79    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/spec.js:
   34  
   35    runner.on('start', function(){
   36:     console.log();
   37    });
   38  
   39    runner.on('suite', function(suite){
   40      ++indents;
   41:     console.log(color('suite', '%s%s'), indent(), suite.title);
   42    });
   43  
   44    runner.on('suite end', function(suite){
   45      --indents;
   46:     if (1 == indents) console.log();
   47    });
   48  
   49    runner.on('pending', function(test){
   50      var fmt = indent() + color('pending', '  - %s');
   51:     console.log(fmt, test.title);
   52    });
   53  
   ..
   58          + color('pass', ' %s ');
   59        cursor.CR();
   60:       console.log(fmt, test.title);
   61      } else {
   62        var fmt = indent()
   ..
   65          + color(test.speed, '(%dms)');
   66        cursor.CR();
   67:       console.log(fmt, test.title, test.duration);
   68      }
   69    });
   ..
   71    runner.on('fail', function(test, err){
   72      cursor.CR();
   73:     console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
   74    });
   75  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/tap.js:
   32    runner.on('start', function(){
   33      var total = runner.grepTotal(runner.suite);
   34:     console.log('%d..%d', 1, total);
   35    });
   36  
   ..
   40  
   41    runner.on('pending', function(test){
   42:     console.log('ok %d %s # SKIP -', n, title(test));
   43    });
   44  
   45    runner.on('pass', function(test){
   46      passes++;
   47:     console.log('ok %d %s', n, title(test));
   48    });
   49  
   50    runner.on('fail', function(test, err){
   51      failures++;
   52:     console.log('not ok %d %s', n, title(test));
   53:     if (err.stack) console.log(err.stack.replace(/^/gm, '  '));
   54    });
   55  
   56    runner.on('end', function(){
   57:     console.log('# tests ' + (passes + failures));
   58:     console.log('# pass ' + passes);
   59:     console.log('# fail ' + failures);
   60    });
   61  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/xunit.js:
   50  
   51    runner.on('end', function(){
   52:     console.log(tag('testsuite', {
   53          name: 'Mocha Tests'
   54        , tests: stats.tests
   ..
   61  
   62      tests.forEach(test);
   63:     console.log('</testsuite>');
   64    });
   65  }
   ..
   85      var err = test.err;
   86      attrs.message = escape(err.message);
   87:     console.log(tag('testcase', attrs, false, tag('failure', attrs, false, cdata(err.stack))));
   88    } else if (test.pending) {
   89:     console.log(tag('testcase', attrs, false, tag('skipped', {}, true)));
   90    } else {
   91:     console.log(tag('testcase', attrs, true) );
   92    }
   93  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/node_modules/debug/lib/debug.js:
  109        + ' +' + humanize(ms) + '\u001b[0m';
  110  
  111:     console.log.apply(this, arguments);
  112    }
  113  
  ...
  117      fmt = new Date().toUTCString()
  118        + ' ' + name + ' ' + fmt;
  119:     console.log.apply(this, arguments);
  120    }
  121  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/node_modules/jade/lib/jade.js:
  103      // Debug compiler
  104      if (options.debug) {
  105:       console.error('\nCompiled Function:\n\n\033[90m%s\033[0m', js.replace(/^/gm, '  '));
  106      }
  107  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/node_modules/jade/node_modules/commander/lib/commander.js:
  122   *        .description('run remote setup commands')
  123   *        .action(function(){
  124:  *          console.log('setup');
  125   *        });
  126   *     
  ...
  129   *        .description('run the given remote command')
  130   *        .action(function(cmd){
  131:  *          console.log('exec "%s"', cmd);
  132   *        });
  133   *     
  ...
  136   *        .description('deploy the given env')
  137   *        .action(function(env){
  138:  *          console.log('deploying "%s"', env);
  139   *        });
  140   *     
  ...
  518  
  519  Command.prototype.missingArgument = function(name){
  520:   console.error();
  521:   console.error("  error: missing required argument `%s'", name);
  522:   console.error();
  523    process.exit(1);
  524  };
  ...
  533  
  534  Command.prototype.optionMissingArgument = function(option, flag){
  535:   console.error();
  536    if (flag) {
  537:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  538    } else {
  539:     console.error("  error: option `%s' argument missing", option.flags);
  540    }
  541:   console.error();
  542    process.exit(1);
  543  };
  ...
  551  
  552  Command.prototype.unknownOption = function(flag){
  553:   console.error();
  554:   console.error("  error: unknown option `%s'", flag);
  555:   console.error();
  556    process.exit(1);
  557  };
  ...
  575    this.option(flags, 'output the version number');
  576    this.on('version', function(){
  577:     console.log(str);
  578      process.exit(0);
  579    });
  ...
  768  Command.prototype.promptMultiLine = function(str, fn){
  769    var buf = [];
  770:   console.log(str);
  771    process.stdin.setEncoding('utf8');
  772    process.stdin.on('data', function(val){
  ...
  792   *
  793   *     program.prompt('Username: ', function(name){
  794:  *       console.log('hi %s', name);
  795   *     });
  796   *     
  797   *     program.prompt('Description:', function(desc){
  798:  *       console.log('description was "%s"', desc.trim());
  799   *     });
  800   *
  ...
  838   *
  839   *     program.password('Password: ', function(pass){
  840:  *       console.log('got "%s"', pass);
  841   *       process.stdin.destroy();
  842   *     });
  843   *
  844   *     program.password('Password: ', '*', function(pass){
  845:  *       console.log('got "%s"', pass);
  846   *       process.stdin.destroy();
  847   *     });
  ...
  870    process.stdin.on('keypress', function(c, key){
  871      if (key && 'enter' == key.name) {
  872:       console.log();
  873        process.stdin.removeAllListeners('keypress');
  874        tty.setRawMode(false);
  ...
  879  
  880      if (key && key.ctrl && 'c' == key.name) {
  881:       console.log('%s', buf);
  882        process.exit();
  883      }
  ...
  894   *
  895   *      program.confirm('continue? ', function(ok){
  896:  *        console.log(' got %j', ok);
  897   *        process.stdin.destroy();
  898   *      });
  ...
  922   *      var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];
  923   *      
  924:  *      console.log('Choose the coolest pet:');
  925   *      program.choose(list, function(i){
  926:  *        console.log('you chose %d "%s"', i, list[i]);
  927   *        process.stdin.destroy();
  928   *      });
  ...
  945    list.forEach(function(item, i){
  946      if (hasDefault && i == index) {
  947:       console.log('* %d) %s', i + 1, item);
  948      } else {
  949:       console.log('  %d) %s', i + 1, item);
  950      }
  951    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/mocha.js:
  132      if (!_reporter) try { _reporter = require(reporter); } catch (err) {};
  133      if (!_reporter && reporter === 'teamcity')
  134:       console.warn('The Teamcity reporter was moved to a package named ' +
  135          'mocha-teamcity-reporter ' +
  136          '(https://npmjs.org/package/mocha-teamcity-reporter).');

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/base.js:
  156  
  157  exports.list = function(failures){
  158:   console.error();
  159    failures.forEach(function(test, i){
  160      // format
  ...
  202        .replace(/^/gm, '  ');
  203  
  204:     console.error(fmt, (i + 1), test.fullTitle(), msg, stack);
  205    });
  206  };
  ...
  284    var fmt;
  285  
  286:   console.log();
  287  
  288    // passes
  ...
  291      + color('light', ' (%s)');
  292  
  293:   console.log(fmt,
  294      stats.passes || 0,
  295      ms(stats.duration));
  ...
  300        + color('pending', ' %d pending');
  301  
  302:     console.log(fmt, stats.pending);
  303    }
  304  
  ...
  307      fmt = color('fail', '  %d failing');
  308  
  309:     console.error(fmt,
  310        stats.failures);
  311  
  312      Base.list(this.failures);
  313:     console.error();
  314    }
  315  
  316:   console.log();
  317  };
  318  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/doc.js:
   35      if (suite.root) return;
   36      ++indents;
   37:     console.log('%s<section class="suite">', indent());
   38      ++indents;
   39:     console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));
   40:     console.log('%s<dl>', indent());
   41    });
   42  
   43    runner.on('suite end', function(suite){
   44      if (suite.root) return;
   45:     console.log('%s</dl>', indent());
   46      --indents;
   47:     console.log('%s</section>', indent());
   48      --indents;
   49    });
   50  
   51    runner.on('pass', function(test){
   52:     console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));
   53      var code = utils.escape(utils.clean(test.fn.toString()));
   54:     console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);
   55    });
   56  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/dot.js:
   51  
   52    runner.on('end', function(){
   53:     console.log();
   54      self.epilogue();
   55    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/json-stream.js:
   28  
   29    runner.on('start', function(){
   30:     console.log(JSON.stringify(['start', { total: total }]));
   31    });
   32  
   33    runner.on('pass', function(test){
   34:     console.log(JSON.stringify(['pass', clean(test)]));
   35    });
   36  
   37    runner.on('fail', function(test, err){
   38:     console.log(JSON.stringify(['fail', clean(test)]));
   39    });
   40  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/landing.js:
   86    runner.on('end', function(){
   87      cursor.show();
   88:     console.log();
   89      self.epilogue();
   90    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/list.js:
   29  
   30    runner.on('start', function(){
   31:     console.log();
   32    });
   33  
   ..
   39      var fmt = color('checkmark', '  -')
   40        + color('pending', ' %s');
   41:     console.log(fmt, test.fullTitle());
   42    });
   43  
   ..
   47        + color(test.speed, '%dms');
   48      cursor.CR();
   49:     console.log(fmt, test.fullTitle(), test.duration);
   50    });
   51  
   52    runner.on('fail', function(test, err){
   53      cursor.CR();
   54:     console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());
   55    });
   56  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/progress.js:
   48    // tests started
   49    runner.on('start', function(){
   50:     console.log();
   51      cursor.hide();
   52    });
   ..
   75    runner.on('end', function(){
   76      cursor.show();
   77:     console.log();
   78      self.epilogue();
   79    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/spec.js:
   34  
   35    runner.on('start', function(){
   36:     console.log();
   37    });
   38  
   39    runner.on('suite', function(suite){
   40      ++indents;
   41:     console.log(color('suite', '%s%s'), indent(), suite.title);
   42    });
   43  
   44    runner.on('suite end', function(suite){
   45      --indents;
   46:     if (1 == indents) console.log();
   47    });
   48  
   49    runner.on('pending', function(test){
   50      var fmt = indent() + color('pending', '  - %s');
   51:     console.log(fmt, test.title);
   52    });
   53  
   ..
   58          + color('pass', ' %s ');
   59        cursor.CR();
   60:       console.log(fmt, test.title);
   61      } else {
   62        var fmt = indent()
   ..
   65          + color(test.speed, '(%dms)');
   66        cursor.CR();
   67:       console.log(fmt, test.title, test.duration);
   68      }
   69    });
   ..
   71    runner.on('fail', function(test, err){
   72      cursor.CR();
   73:     console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
   74    });
   75  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/tap.js:
   32    runner.on('start', function(){
   33      var total = runner.grepTotal(runner.suite);
   34:     console.log('%d..%d', 1, total);
   35    });
   36  
   ..
   40  
   41    runner.on('pending', function(test){
   42:     console.log('ok %d %s # SKIP -', n, title(test));
   43    });
   44  
   45    runner.on('pass', function(test){
   46      passes++;
   47:     console.log('ok %d %s', n, title(test));
   48    });
   49  
   50    runner.on('fail', function(test, err){
   51      failures++;
   52:     console.log('not ok %d %s', n, title(test));
   53:     if (err.stack) console.log(err.stack.replace(/^/gm, '  '));
   54    });
   55  
   56    runner.on('end', function(){
   57:     console.log('# tests ' + (passes + failures));
   58:     console.log('# pass ' + passes);
   59:     console.log('# fail ' + failures);
   60    });
   61  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/xunit.js:
   50  
   51    runner.on('end', function(){
   52:     console.log(tag('testsuite', {
   53          name: 'Mocha Tests'
   54        , tests: stats.tests
   ..
   61  
   62      tests.forEach(test);
   63:     console.log('</testsuite>');
   64    });
   65  }
   ..
   85      var err = test.err;
   86      attrs.message = escape(err.message);
   87:     console.log(tag('testcase', attrs, false, tag('failure', attrs, false, cdata(err.stack))));
   88    } else if (test.pending) {
   89:     console.log(tag('testcase', attrs, false, tag('skipped', {}, true)));
   90    } else {
   91:     console.log(tag('testcase', attrs, true) );
   92    }
   93  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/node_modules/debug/lib/debug.js:
  109        + ' +' + humanize(ms) + '\u001b[0m';
  110  
  111:     console.log.apply(this, arguments);
  112    }
  113  
  ...
  117      fmt = new Date().toUTCString()
  118        + ' ' + name + ' ' + fmt;
  119:     console.log.apply(this, arguments);
  120    }
  121  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/node_modules/jade/lib/jade.js:
  103      // Debug compiler
  104      if (options.debug) {
  105:       console.error('\nCompiled Function:\n\n\033[90m%s\033[0m', js.replace(/^/gm, '  '));
  106      }
  107  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/node_modules/jade/node_modules/commander/lib/commander.js:
  122   *        .description('run remote setup commands')
  123   *        .action(function(){
  124:  *          console.log('setup');
  125   *        });
  126   *     
  ...
  129   *        .description('run the given remote command')
  130   *        .action(function(cmd){
  131:  *          console.log('exec "%s"', cmd);
  132   *        });
  133   *     
  ...
  136   *        .description('deploy the given env')
  137   *        .action(function(env){
  138:  *          console.log('deploying "%s"', env);
  139   *        });
  140   *     
  ...
  518  
  519  Command.prototype.missingArgument = function(name){
  520:   console.error();
  521:   console.error("  error: missing required argument `%s'", name);
  522:   console.error();
  523    process.exit(1);
  524  };
  ...
  533  
  534  Command.prototype.optionMissingArgument = function(option, flag){
  535:   console.error();
  536    if (flag) {
  537:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  538    } else {
  539:     console.error("  error: option `%s' argument missing", option.flags);
  540    }
  541:   console.error();
  542    process.exit(1);
  543  };
  ...
  551  
  552  Command.prototype.unknownOption = function(flag){
  553:   console.error();
  554:   console.error("  error: unknown option `%s'", flag);
  555:   console.error();
  556    process.exit(1);
  557  };
  ...
  575    this.option(flags, 'output the version number');
  576    this.on('version', function(){
  577:     console.log(str);
  578      process.exit(0);
  579    });
  ...
  768  Command.prototype.promptMultiLine = function(str, fn){
  769    var buf = [];
  770:   console.log(str);
  771    process.stdin.setEncoding('utf8');
  772    process.stdin.on('data', function(val){
  ...
  792   *
  793   *     program.prompt('Username: ', function(name){
  794:  *       console.log('hi %s', name);
  795   *     });
  796   *     
  797   *     program.prompt('Description:', function(desc){
  798:  *       console.log('description was "%s"', desc.trim());
  799   *     });
  800   *
  ...
  838   *
  839   *     program.password('Password: ', function(pass){
  840:  *       console.log('got "%s"', pass);
  841   *       process.stdin.destroy();
  842   *     });
  843   *
  844   *     program.password('Password: ', '*', function(pass){
  845:  *       console.log('got "%s"', pass);
  846   *       process.stdin.destroy();
  847   *     });
  ...
  870    process.stdin.on('keypress', function(c, key){
  871      if (key && 'enter' == key.name) {
  872:       console.log();
  873        process.stdin.removeAllListeners('keypress');
  874        tty.setRawMode(false);
  ...
  879  
  880      if (key && key.ctrl && 'c' == key.name) {
  881:       console.log('%s', buf);
  882        process.exit();
  883      }
  ...
  894   *
  895   *      program.confirm('continue? ', function(ok){
  896:  *        console.log(' got %j', ok);
  897   *        process.stdin.destroy();
  898   *      });
  ...
  922   *      var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];
  923   *      
  924:  *      console.log('Choose the coolest pet:');
  925   *      program.choose(list, function(i){
  926:  *        console.log('you chose %d "%s"', i, list[i]);
  927   *        process.stdin.destroy();
  928   *      });
  ...
  945    list.forEach(function(item, i){
  946      if (hasDefault && i == index) {
  947:       console.log('* %d) %s', i + 1, item);
  948      } else {
  949:       console.log('  %d) %s', i + 1, item);
  950      }
  951    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/handlebars/lib/handlebars/base.js:
  215      if (logger.level <= level) {
  216        var method = logger.methodMap[level];
  217:       if (typeof console !== 'undefined' && console[method]) {
  218:         console[method].call(console, obj);
  219        }
  220      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/handlebars/node_modules/uglify-js/lib/compress.js:
 1624                                  compressor.warn(ex.toString());
 1625                              } else {
 1626:                                 console.log(ex);
 1627                              }
 1628                          }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/handlebars/node_modules/uglify-js/lib/mozilla-ast.js:
  240  
  241          // moz_to_me = parse(moz_to_me).print_to_string({ beautify: true });
  242:         // console.log(moz_to_me);
  243  
  244          moz_to_me = new Function("mytype", "my_start_token", "my_end_token", "from_moz", "return(" + moz_to_me + ")")(

/Users/maurizio/dev/stackticjs/stacktic/node_modules/handlebars/node_modules/uglify-js/node_modules/async/lib/async.js:
    1: /*global setImmediate: false, setTimeout: false, console: false */
    2  (function () {
    3  
    .
  807      };
  808  
  809:     var _console_fn = function (name) {
  810          return function (fn) {
  811              var args = Array.prototype.slice.call(arguments, 1);
  812              fn.apply(null, args.concat([function (err) {
  813                  var args = Array.prototype.slice.call(arguments, 1);
  814:                 if (typeof console !== 'undefined') {
  815                      if (err) {
  816:                         if (console.error) {
  817:                             console.error(err);
  818                          }
  819                      }
  820:                     else if (console[name]) {
  821                          _each(args, function (x) {
  822:                             console[name](x);
  823                          });
  824                      }
  ...
  827          };
  828      };
  829:     async.log = _console_fn('log');
  830:     async.dir = _console_fn('dir');
  831:     /*async.info = _console_fn('info');
  832:     async.warn = _console_fn('warn');
  833:     async.error = _console_fn('error');*/
  834  
  835      async.memoize = function (fn, hasher) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/highlight.js/lib/languages/coffeescript.js:
   16        '__hasProp __extends __slice __bind __indexOf',
   17      built_in:
   18:       'npm require console print module exports global window document'
   19    };
   20    var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/lib/paginate.js:
  131  		}
  132  		catch (exception) {
  133: 			console.error('Could not patch Mongoose, due to the following exception:');
  134: 			console.error(exception);
  135  		}
  136  	}

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/node_modules/jade/lib/jade.js:
  103      // Debug compiler
  104      if (options.debug) {
  105:       console.error('\nCompiled Function:\n\n\033[90m%s\033[0m', js.replace(/^/gm, '  '));
  106      }
  107  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/node_modules/jade/node_modules/coffee-script/lib/coffee-script/cake.js:
   76      relative = path.relative || path.resolve;
   77      cakefilePath = path.join(relative(__originalDirname, process.cwd()), 'Cakefile');
   78:     console.log("" + cakefilePath + " defines the following tasks:\n");
   79      for (name in tasks) {
   80        task = tasks[name];
   ..
   82        spaces = spaces > 0 ? Array(spaces + 1).join(' ') : '';
   83        desc = task.description ? "# " + task.description : '';
   84:       console.log("cake " + name + spaces + " " + desc);
   85      }
   86      if (switches.length) {
   87:       return console.log(oparse.help());
   88      }
   89    };
   90  
   91    fatalError = function(message) {
   92:     console.error(message + '\n');
   93:     console.log('To see a list of all tasks/options, run "cake"');
   94      return process.exit(1);
   95    };

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/node_modules/jade/node_modules/coffee-script/lib/coffee-script/command.js:
  102          }
  103          if (topLevel) {
  104:           console.error("File not found: " + source);
  105            process.exit(1);
  106          }
  ...
  427  
  428    timeLog = function(message) {
  429:     return console.log("" + ((new Date).toLocaleTimeString()) + " - " + message);
  430    };
  431  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/node_modules/jade/node_modules/commander/lib/commander.js:
  122   *        .description('run remote setup commands')
  123   *        .action(function(){
  124:  *          console.log('setup');
  125   *        });
  126   *     
  ...
  129   *        .description('run the given remote command')
  130   *        .action(function(cmd){
  131:  *          console.log('exec "%s"', cmd);
  132   *        });
  133   *     
  ...
  136   *        .description('deploy the given env')
  137   *        .action(function(env){
  138:  *          console.log('deploying "%s"', env);
  139   *        });
  140   *     
  ...
  518  
  519  Command.prototype.missingArgument = function(name){
  520:   console.error();
  521:   console.error("  error: missing required argument `%s'", name);
  522:   console.error();
  523    process.exit(1);
  524  };
  ...
  533  
  534  Command.prototype.optionMissingArgument = function(option, flag){
  535:   console.error();
  536    if (flag) {
  537:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  538    } else {
  539:     console.error("  error: option `%s' argument missing", option.flags);
  540    }
  541:   console.error();
  542    process.exit(1);
  543  };
  ...
  551  
  552  Command.prototype.unknownOption = function(flag){
  553:   console.error();
  554:   console.error("  error: unknown option `%s'", flag);
  555:   console.error();
  556    process.exit(1);
  557  };
  ...
  575    this.option(flags, 'output the version number');
  576    this.on('version', function(){
  577:     console.log(str);
  578      process.exit(0);
  579    });
  ...
  768  Command.prototype.promptMultiLine = function(str, fn){
  769    var buf = [];
  770:   console.log(str);
  771    process.stdin.setEncoding('utf8');
  772    process.stdin.on('data', function(val){
  ...
  792   *
  793   *     program.prompt('Username: ', function(name){
  794:  *       console.log('hi %s', name);
  795   *     });
  796   *     
  797   *     program.prompt('Description:', function(desc){
  798:  *       console.log('description was "%s"', desc.trim());
  799   *     });
  800   *
  ...
  838   *
  839   *     program.password('Password: ', function(pass){
  840:  *       console.log('got "%s"', pass);
  841   *       process.stdin.destroy();
  842   *     });
  843   *
  844   *     program.password('Password: ', '*', function(pass){
  845:  *       console.log('got "%s"', pass);
  846   *       process.stdin.destroy();
  847   *     });
  ...
  870    process.stdin.on('keypress', function(c, key){
  871      if (key && 'enter' == key.name) {
  872:       console.log();
  873        process.stdin.removeAllListeners('keypress');
  874        tty.setRawMode(false);
  ...
  879  
  880      if (key && key.ctrl && 'c' == key.name) {
  881:       console.log('%s', buf);
  882        process.exit();
  883      }
  ...
  894   *
  895   *      program.confirm('continue? ', function(ok){
  896:  *        console.log(' got %j', ok);
  897   *        process.stdin.destroy();
  898   *      });
  ...
  922   *      var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];
  923   *      
  924:  *      console.log('Choose the coolest pet:');
  925   *      program.choose(list, function(i){
  926:  *        console.log('you chose %d "%s"', i, list[i]);
  927   *        process.stdin.destroy();
  928   *      });
  ...
  945    list.forEach(function(item, i){
  946      if (hasDefault && i == index) {
  947:       console.log('* %d) %s', i + 1, item);
  948      } else {
  949:       console.log('  %d) %s', i + 1, item);
  950      }
  951    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/slug/node_modules/unicode/node_modules/bufferstream/lib/fn.js:
   19      process.nextTick(function() {
   20        if (exports.warn) {
   21:         return console.warn(exports.warn);
   22        }
   23      });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/yfm/node_modules/fs-utils/node_modules/async/lib/async.js:
    1: /*global setImmediate: false, setTimeout: false, console: false */
    2  (function () {
    3  
    .
  807      };
  808  
  809:     var _console_fn = function (name) {
  810          return function (fn) {
  811              var args = Array.prototype.slice.call(arguments, 1);
  812              fn.apply(null, args.concat([function (err) {
  813                  var args = Array.prototype.slice.call(arguments, 1);
  814:                 if (typeof console !== 'undefined') {
  815                      if (err) {
  816:                         if (console.error) {
  817:                             console.error(err);
  818                          }
  819                      }
  820:                     else if (console[name]) {
  821                          _each(args, function (x) {
  822:                             console[name](x);
  823                          });
  824                      }
  ...
  827          };
  828      };
  829:     async.log = _console_fn('log');
  830:     async.dir = _console_fn('dir');
  831:     /*async.info = _console_fn('info');
  832:     async.warn = _console_fn('warn');
  833:     async.error = _console_fn('error');*/
  834  
  835      async.memoize = function (fn, hasher) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/yfm/node_modules/js-yaml/lib/js-yaml/loader.js:
  156      throw error;
  157    } else {
  158:     console.warn(error.toString());
  159    }
  160  }

702 matches across 137 files


FSearching 682 files for "console" (case sensitive)

/Users/maurizio/dev/stackticjs/stacktic/lib/stacktic.js:
  246    }
  247  
  248:   console.warn('Context', this.context);
  249  
  250    var filePath = path.match(/\/$/) ? path + "index.html" : (

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/lib/grunt/fail.js:
   44    if (grunt.option('stack')) {
   45      if (e.origError && e.origError.stack) {
   46:       console.log(e.origError.stack);
   47      } else if (e.stack) {
   48:       console.log(e.stack);
   49      }
   50    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/async/lib/async.js:
    1: /*global setTimeout: false, console: false */
    2  (function () {
    3  
    .
  626      };
  627  
  628:     var _console_fn = function (name) {
  629          return function (fn) {
  630              var args = Array.prototype.slice.call(arguments, 1);
  631              fn.apply(null, args.concat([function (err) {
  632                  var args = Array.prototype.slice.call(arguments, 1);
  633:                 if (typeof console !== 'undefined') {
  634                      if (err) {
  635:                         if (console.error) {
  636:                             console.error(err);
  637                          }
  638                      }
  639:                     else if (console[name]) {
  640                          _forEach(args, function (x) {
  641:                             console[name](x);
  642                          });
  643                      }
  ...
  646          };
  647      };
  648:     async.log = _console_fn('log');
  649:     async.dir = _console_fn('dir');
  650:     /*async.info = _console_fn('info');
  651:     async.warn = _console_fn('warn');
  652:     async.error = _console_fn('error');*/
  653  
  654      async.memoize = function (fn, hasher) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/coffee-script/lib/coffee-script/cake.js:
   74      relative = path.relative || path.resolve;
   75      cakefilePath = path.join(relative(__originalDirname, process.cwd()), 'Cakefile');
   76:     console.log("" + cakefilePath + " defines the following tasks:\n");
   77      for (name in tasks) {
   78        task = tasks[name];
   ..
   80        spaces = spaces > 0 ? Array(spaces + 1).join(' ') : '';
   81        desc = task.description ? "# " + task.description : '';
   82:       console.log("cake " + name + spaces + " " + desc);
   83      }
   84      if (switches.length) {
   85:       return console.log(oparse.help());
   86      }
   87    };
   88  
   89    fatalError = function(message) {
   90:     console.error(message + '\n');
   91:     console.log('To see a list of all tasks/options, run "cake"');
   92      return process.exit(1);
   93    };

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/coffee-script/lib/coffee-script/command.js:
  100          }
  101          if (topLevel) {
  102:           console.error("File not found: " + source);
  103            process.exit(1);
  104          }
  ...
  425  
  426    timeLog = function(message) {
  427:     return console.log("" + ((new Date).toLocaleTimeString()) + " - " + message);
  428    };
  429  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/eventemitter2/lib/eventemitter2.js:
  193  
  194                tree._listeners.warned = true;
  195:               console.error('(node) warning: possible EventEmitter memory ' +
  196                              'leak detected. %d listeners added. ' +
  197                              'Use emitter.setMaxListeners() to increase limit.',
  198                              tree._listeners.length);
  199:               console.trace();
  200              }
  201            }
  ...
  385  
  386            this._events[type].warned = true;
  387:           console.error('(node) warning: possible EventEmitter memory ' +
  388                          'leak detected. %d listeners added. ' +
  389                          'Use emitter.setMaxListeners() to increase limit.',
  390                          this._events[type].length);
  391:           console.trace();
  392          }
  393        }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/js-yaml/lib/js-yaml/loader.js:
  161        throw error;
  162      } else {
  163:       console.warn(error.toString());
  164      }
  165    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/entry-writer.js:
   57  
   58  EntryWriter.prototype.write = function (c) {
   59:   // console.error(".. ew write")
   60    if (this._ended) return this.emit("error", new Error("write after end"))
   61    this._buffer.push(c)
   ..
   66  
   67  EntryWriter.prototype.end = function (c) {
   68:   // console.error(".. ew end")
   69    if (c) this._buffer.push(c)
   70    this._buffer.push(EOF)
   ..
   75  
   76  EntryWriter.prototype.pause = function () {
   77:   // console.error(".. ew pause")
   78    this._paused = true
   79    this.emit("pause")
   ..
   81  
   82  EntryWriter.prototype.resume = function () {
   83:   // console.error(".. ew resume")
   84    this._paused = false
   85    this.emit("resume")
   ..
   88  
   89  EntryWriter.prototype.add = function (entry) {
   90:   // console.error(".. ew add")
   91    if (!this.parent) return this.emit("error", new Error("no parent"))
   92  
   ..
   99  
  100  EntryWriter.prototype._header = function () {
  101:   // console.error(".. ew header")
  102    if (this._didHeader) return
  103    this._didHeader = true
  ...
  121    }
  122  
  123:   // console.error(".. .. ew headerBlock emitting")
  124    this.emit("data", headerBlock)
  125    this.emit("header")
  ...
  127  
  128  EntryWriter.prototype._process = function () {
  129:   // console.error(".. .. ew process")
  130    if (!this._didHeader && !this._meta) {
  131      this._header()
  ...
  133  
  134    if (this._paused || this._processing) {
  135:     // console.error(".. .. .. paused=%j, processing=%j", this._paused, this._processing)
  136      return
  137    }
  ...
  141    var buf = this._buffer
  142    for (var i = 0; i < buf.length; i ++) {
  143:     // console.error(".. .. .. i=%d", i)
  144  
  145      var c = buf[i]
  ...
  149  
  150      if (this._paused) {
  151:       // console.error(".. .. .. paused mid-emission")
  152        this._processing = false
  153        if (i < buf.length) {
  ...
  159    }
  160  
  161:   // console.error(".. .. .. emitted")
  162    this._buffer.length = 0
  163    this._processing = false
  164  
  165:   // console.error(".. .. .. emitting drain")
  166    this.emit("drain")
  167  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/entry.js:
   88  
   89  , resume: function () {
   90:     // console.error("    Tar Entry resume", this.path)
   91      this.emit("resume")
   92      this._paused = false
   ..
   97    // This is bound to the instance
   98  , _read: function () {
   99:     // console.error("    Tar Entry _read", this.path)
  100  
  101      if (this._paused || this._reading || this._ended) return

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/extended-header-writer.js:
   16  // Don't be shy with it.  Just encode everything.
   17  function ExtendedHeaderWriter (props) {
   18:   // console.error(">> ehw ctor")
   19    var me = this
   20  
   ..
   45  
   46    EntryWriter.call(me, p)
   47:   // console.error(">> ehw props", me.props)
   48    me.props = p
   49  
   ..
   52  
   53  ExtendedHeaderWriter.prototype.end = function () {
   54:   // console.error(">> ehw end")
   55    var me = this
   56  
   ..
   73    me._ready = true
   74  
   75:   // console.error(">> ehw _process calling end()", me.props)
   76    this._stream.end()
   77  }
   78  
   79  ExtendedHeaderWriter.prototype._encodeFields = function () {
   80:   // console.error(">> ehw _encodeFields")
   81    this.body = []
   82    if (this.fields.prefix) {
   ..
   92  
   93  function encodeFields (fields, prefix, body, nop) {
   94:   // console.error(">> >> ehw encodeFields")
   95    // "%d %s=%s\n", <length>, <keyword>, <value>
   96    // The length is a decimal number, and includes itself and the \n
   ..
  162      , digits = Math.floor(Math.log(s.length) / Math.log(10)) + 1
  163  
  164:   // console.error("1 s=%j digits=%j s.length=%d", s.toString(), digits, s.length)
  165  
  166    // if adding that many digits will make it go over that length,
  ...
  174    // itself.  In that case, just bump it up again.
  175    if (s.length + digits >= Math.pow(10, digits)) digits += 1
  176:   // console.error("2 s=%j digits=%j s.length=%d", s.toString(), digits, s.length)
  177  
  178    var len = digits + s.length
  179:   // console.error("3 s=%j digits=%j s.length=%d len=%d", s.toString(), digits, s.length, len)
  180    var lenBuf = new Buffer("" + len)
  181    if (lenBuf.length + s.length !== len) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/extended-header.js:
   64        ; i < l
   65        ; this._position++, this._fieldPos++, i++) {
   66:     // console.error("top of loop, size="+this._size)
   67  
   68      var b = c[i]
   ..
   77  
   78        case SIZE:
   79:         // console.error("parsing size, b=%d, rest=%j", b, c.slice(i).toString())
   80          if (b === space) {
   81            this._state = KEY
   ..
  107          // field must end with cr
  108          if (this._fieldPos === this._size - 1) {
  109:           // console.error("finished with "+this._key)
  110            if (b !== cr) {
  111              error(this, "expected \\n at end of field")

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/extract.js:
   59  
   60    // this._fst.on("end", function () {
   61:   //   console.error("\nEEEE Extract End", me._fst.path)
   62    // })
   63  
   64    this._fst.on("close", function () {
   65:     // console.error("\nEEEE Extract End", me._fst.path)
   66      me.emit("end")
   67      me.emit("close")

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/header.js:
   46    // the path field.
   47    if (obj.prefix) {
   48:     // console.error("%% header encoding, got a prefix", obj.prefix)
   49      obj.path = obj.prefix + "/" + obj.path
   50:     // console.error("%% header encoding, prefixed path", obj.path)
   51      obj.prefix = ""
   52    }
   ..
   72        case "prefix":
   73          // special, this is an extension of the "path" field.
   74:         // console.error("%% header encoding, skip prefix later")
   75          break
   76  
   ..
  118              off = fieldOffs[fields.prefix]
  119              end = fieldEnds[fields.prefix]
  120:             // console.error("%% header writing prefix", off, end, prefix)
  121              ret = writeText(block, off, end, prefix) || ret
  122              break
  ...
  128          // on old implementations no matter what we do here.
  129          // Null out the prefix, and fallthrough to default.
  130:         // console.error("%% header writing no prefix")
  131          var poff = fieldOffs[fields.prefix]
  132            , pend = fieldEnds[fields.prefix]
  ...
  163  
  164    num = num || 0
  165:   // console.error("  numeric", num)
  166  
  167    if (num instanceof Date ||
  ...
  306            return
  307          } else {
  308:           // console.error("ustar:", val, val.toString())
  309            this.ustar = val.toString()
  310          }
  ...
  325          }
  326          prefix = val.toString("utf8").replace(/\0+$/, "")
  327:         // console.error("%% header reading prefix", prefix)
  328          break
  329  
  ...
  343    if (prefix) {
  344      this.path = prefix + "/" + this.path
  345:     // console.error("%% header got a prefix", this.path)
  346    }
  347  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/lib/pack.js:
   17  
   18  function Pack (props) {
   19:   // console.error("-- p ctor")
   20    var me = this
   21    if (!(me instanceof Pack)) return new Pack(props)
   ..
   29    me.writable = true
   30    me._buffer = []
   31:   // console.error("-- -- set current to null in ctor")
   32    me._currentEntry = null
   33    me._processing = false
   ..
   45  
   46  Pack.prototype.addGlobal = function (props) {
   47:   // console.error("-- p addGlobal")
   48    if (this._didGlobal) return
   49    this._didGlobal = true
   ..
  104  
  105    if (entry.ready === false) {
  106:     // console.error("-- entry is not ready", entry)
  107      me._buffer.unshift(entry)
  108      entry.on("ready", function () {
  109:       // console.error("-- -- ready!", entry)
  110        me._process()
  111      })
  ...
  174    }
  175  
  176:   // console.error("-- new writer", wprops)
  177    // if (!wprops.type) {
  178:   //   // console.error("-- no type?", entry.constructor.name, entry)
  179    // }
  180  
  181:   // console.error("-- -- set current to new writer", wprops.path)
  182    var writer = me._currentEntry = EntryWriter(wprops)
  183  
  ...
  185  
  186    // writer.on("end", function () {
  187:   //   // console.error("-- -- writer end", writer.path)
  188    // })
  189  
  ...
  196        return this.toString().split(/\0/).join(".")
  197      }
  198:     // console.error("-- -- writer header %j", writer.props)
  199      if (writer.props.size === 0) nextEntry()
  200    })
  ...
  206      ended = true
  207  
  208:     // console.error("-- -- writer close", writer.path)
  209:     // console.error("-- -- set current to null", wprops.path)
  210      me._currentEntry = null
  211      me._processing = false
  ...
  214  
  215    writer.on("error", function (er) {
  216:     // console.error("-- -- writer error", writer.path)
  217      me.emit("error", er)
  218    })
  ...
  221    // or data, since they'll be added directly.
  222    if (entry === me._pipeRoot) {
  223:     // console.error("-- is the root, don't auto-add")
  224      writer.add = null
  225    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/abstract.js:
   32      , er = decorate(msg, code, me)
   33    if (!me.listeners("warn")) {
   34:     console.error("%s %s\n" +
   35                    "path = %s\n" +
   36                    "syscall = %s\n" +

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/collect.js:
   33    // without a destination, then it'll re-play the events.
   34    stream.pipe = (function (orig) { return function (dest) {
   35:     // console.error(" === open the pipes", dest && dest.path)
   36  
   37      // let the entries flow through one at a time.
   ..
   40      ;(function unblockEntry () {
   41        var entry = entryBuffer[e++]
   42:       // console.error(" ==== unblock entry", entry && entry.path)
   43        if (!entry) return resume()
   44        entry.on("end", unblockEntry)

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/dir-reader.js:
   72  
   73    if (me._paused || me._currentEntry || me._aborted) {
   74:     // console.error("DR paused=%j, current=%j, aborted=%j", me._paused, !!me._currentEntry, me._aborted)
   75      return
   76    }
   ..
  110      var entry = Reader(childProps, stat)
  111  
  112:     // console.error("DR Entry", p, stat.size)
  113  
  114      me._currentEntry = entry
  ...
  140  
  141      entry.on("ready", function EMITCHILD () {
  142:       // console.error("DR emit child", entry._path)
  143        if (me._paused) {
  144:         // console.error("  DR emit child - try again later")
  145          // pause the child, and emit the "entry" event once we drain.
  146:         // console.error("DR pausing child entry")
  147          entry.pause(me)
  148          return me.once("resume", EMITCHILD)
  ...
  233  
  234    me._paused = false
  235:   // console.error("DR Emit Resume", me._path)
  236    me.emit("resume", who)
  237    if (me._paused) {
  238:     // console.error("DR Re-paused", me._path)
  239      return
  240    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/dir-writer.js:
   58    var me = this
   59  
   60:   // console.error("\tadd", entry._path, "->", me._path)
   61    collect(entry)
   62    if (!me.ready || me._currentEntry) {
   ..
   79    var me = this
   80  
   81:   // console.error("DW Process p=%j", me._processing, me.basename)
   82  
   83    if (me._processing) return
   ..
   85    var entry = me._buffer.shift()
   86    if (!entry) {
   87:     // console.error("DW Drain")
   88      me.emit("drain")
   89      if (me._ended) me._finish()
   ..
   92  
   93    me._processing = true
   94:   // console.error("DW Entry", entry._path)
   95  
   96    me.emit("entry", entry)
   ..
  104      if (pp === me.root._path || pp === me._path ||
  105          (pp && pp.indexOf(me._path) === 0)) {
  106:       // console.error("DW Exit (recursive)", entry.basename, me._path)
  107        me._processing = false
  108        if (entry._collected) entry.pipe()
  ...
  111    } while (p = p.parent)
  112  
  113:   // console.error("DW not recursive")
  114  
  115    // chop off the entry's root dir, replace with ours
  ...
  139    var child = me._currentChild = new Writer(props)
  140    child.on("ready", function () {
  141:     // console.error("DW Child Ready", child.type, child._path)
  142:     // console.error("  resuming", entry._path)
  143      entry.pipe(child)
  144      entry.resume()
  ...
  164      if (ended) return
  165      ended = true
  166:     // console.error("* DW Child end", child.basename)
  167      me._currentChild = null
  168      me._processing = false

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/file-reader.js:
   15  
   16  function FileReader (props) {
   17:   // console.error("    FR create", props.path, props.size, new Error().stack)
   18    var me = this
   19    if (!(me instanceof FileReader)) throw new Error(
   ..
   44  
   45    stream.on("data", function (c) {
   46:     // console.error("\t\t%d %s", c.length, me.basename)
   47      me._bytesEmitted += c.length
   48      // no point saving empty chunks
   ..
   56    stream.on("end", function () {
   57      if (me._paused || me._buffer.length) {
   58:       // console.error("FR Buffering End", me._path)
   59        me._buffer.push(EOF)
   60        me._read()
   ..
   72    stream.on("close", function () {
   73      if (me._paused || me._buffer.length) {
   74:       // console.error("FR Buffering Close", me._path)
   75        me._buffer.push(CLOSE)
   76        me._read()
   77      } else {
   78:       // console.error("FR close 1", me._path)
   79        me.emit("close")
   80      }
   ..
   86  FileReader.prototype._read = function () {
   87    var me = this
   88:   // console.error("FR _read", me._path)
   89    if (me._paused) {
   90:     // console.error("FR _read paused", me._path)
   91      return
   92    }
   93  
   94    if (!me._stream) {
   95:     // console.error("FR _getStream calling", me._path)
   96      return me._getStream()
   97    }
   ..
   99    // clear out the buffer, if there is one.
  100    if (me._buffer.length) {
  101:     // console.error("FR _read has buffer", me._buffer.length, me._path)
  102      var buf = me._buffer
  103      for (var i = 0, l = buf.length; i < l; i ++) {
  104        var c = buf[i]
  105        if (c === EOF) {
  106:         // console.error("FR Read emitting buffered end", me._path)
  107          me.emit("end")
  108        } else if (c === CLOSE) {
  109:         // console.error("FR Read emitting buffered close", me._path)
  110          me.emit("close")
  111        } else {
  112:         // console.error("FR Read emitting buffered data", me._path)
  113          me.emit("data", c)
  114        }
  115  
  116        if (me._paused) {
  117:         // console.error("FR Read Re-pausing at "+i, me._path)
  118          me._buffer = buf.slice(i)
  119          return
  ...
  122      me._buffer.length = 0
  123    }
  124:   // console.error("FR _read done")
  125    // that's about all there is to it.
  126  }
  ...
  128  FileReader.prototype.pause = function (who) {
  129    var me = this
  130:   // console.error("FR Pause", me._path)
  131    if (me._paused) return
  132    who = who || me
  ...
  138  FileReader.prototype.resume = function (who) {
  139    var me = this
  140:   // console.error("FR Resume", me._path)
  141    if (!me._paused) return
  142    who = who || me

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/file-writer.js:
   37  
   38    me._stream.on("open", function (fd) {
   39:     // console.error("FW open", me._buffer, me._path)
   40      me.ready = true
   41      me._buffer.forEach(function (c) {
   ..
   51  
   52    me._stream.on("close", function () {
   53:     // console.error("\n\nFW Stream Close", me._path, me.size)
   54      me._finish()
   55    })
   ..
   69  
   70    var ret = me._stream.write(c)
   71:   // console.error("\t-- fw wrote, _stream says", ret, me._stream._queue.length)
   72  
   73    // allow 2 buffered writes, because otherwise there's just too

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/link-writer.js:
   30  
   31  LinkWriter.prototype._create = function () {
   32:   // console.error(" LW _create")
   33    var me = this
   34      , hard = me.type === "Link" || process.platform === "win32"
   ..
   87  
   88  LinkWriter.prototype.end = function () {
   89:   // console.error("LW finish in end")
   90    this._ended = true
   91    if (this.ready) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/proxy-reader.js:
   66      , "stat"
   67      ].forEach(function (ev) {
   68:       // console.error("~~ proxy event", ev, me.path)
   69        proxy.on(ev, me.emit.bind(me, ev))
   70      })
   ..
   73  
   74    proxy.on("ready", function () {
   75:     // console.error("~~ proxy is ready!", me.path)
   76      me.ready = true
   77      me.emit("ready")

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/proxy-writer.js:
   50  
   51  ProxyWriter.prototype._addProxy = function (proxy) {
   52:   // console.error("~~ set proxy", this.path)
   53    var me = this
   54    if (me._proxy) {
   ..
   71    var calls = me._buffer
   72    calls.forEach(function (c) {
   73:     // console.error("~~ ~~ proxy buffered call", c[0], c[1])
   74      proxy[c[0]].apply(proxy, c[1])
   75    })
   ..
   79  
   80  ProxyWriter.prototype.add = function (entry) {
   81:   // console.error("~~ proxy add")
   82    collect(entry)
   83  
   ..
   91  
   92  ProxyWriter.prototype.write = function (c) {
   93:   // console.error("~~ proxy write")
   94    if (!this._proxy) {
   95      this._buffer.push(["write", [c]])
   ..
  101  
  102  ProxyWriter.prototype.end = function (c) {
  103:   // console.error("~~ proxy end")
  104    if (!this._proxy) {
  105      this._buffer.push(["end", [c]])

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/reader.js:
  119    props.parent = props.root = null
  120  
  121:   // console.error("\n\n\n%s setting size to", props.path, props.size)
  122    me.size = props.size
  123    me.filter = typeof props.filter === "function" ? props.filter : null
  ...
  127    // this will stat the thing, and then call me._read()
  128    // to start reading whatever it is.
  129:   // console.error("calling stat", props.path, currentStat)
  130    me._stat(currentStat)
  131  }
  ...
  144      , stat = props.follow ? "stat" : "lstat"
  145  
  146:   // console.error("Reader._stat", me._path, currentStat)
  147    if (currentStat) process.nextTick(statCb.bind(null, null, currentStat))
  148    else fs[stat](me._path, statCb)
  ...
  150  
  151    function statCb (er, props_) {
  152:     // console.error("Reader._stat, statCb", me._path, props_, props_.nlink)
  153      if (er) return me.error(er)
  154  
  ...
  167      if (type !== "Directory" && props.nlink && props.nlink > 1) {
  168        var k = props.dev + ":" + props.ino
  169:       // console.error("Reader has nlink", me._path, k)
  170        if (hardLinks[k] === me._path || !hardLinks[k]) hardLinks[k] = me._path
  171        else {
  ...
  174          me.Link = me.props.Link = true
  175          me.linkpath = me.props.linkpath = hardLinks[k]
  176:         // console.error("Hardlink detected, switching mode", me._path, me.linkpath)
  177          // Setting __proto__ would arguably be the "correct"
  178          // approach here, but that just seems too wrong.
  ...
  235    }
  236  
  237:   // console.error("R Pipe apply Stream Pipe")
  238    return Stream.prototype.pipe.apply(this, arguments)
  239  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/lodash/vendor/tar/vendor/fstream/lib/writer.js:
   85    props.parent = props.root = null
   86  
   87:   // console.error("\n\n\n%s setting size to", props.path, props.size)
   88    me.size = props.size
   89  
   ..
  163  
  164  function create (me) {
  165:   // console.error("W create", me._path, Writer.dirmode)
  166  
  167    // XXX Need to clobber non-dirs that are in the way,
  168    // unless { clobber: false } in the props.
  169    mkdir(path.dirname(me._path), Writer.dirmode, function (er, made) {
  170:     // console.error("W created", path.dirname(me._path), er)
  171      if (er) return me.error(er)
  172  
  ...
  247    var me = this
  248  
  249:   // console.error(" W Finish", me._path, me.size)
  250  
  251    // set up all the things.
  ...
  261      me._old.atime = new Date(0)
  262      me._old.mtime = new Date(0)
  263:     // console.error(" W Finish Stale Stat", me._path, me.size)
  264      setProps(me._old)
  265    } else {
  266      var stat = me.props.follow ? "stat" : "lstat"
  267:     // console.error(" W Finish Stating", me._path, me.size)
  268      fs[stat](me._path, function (er, current) {
  269:       // console.error(" W Finish Stated", me._path, me.size, current)
  270        if (er) {
  271          // if we're in the process of writing out a
  ...
  299    function next (what) {
  300      return function (er) {
  301:       // console.error("   W Finish", what, todo)
  302        if (errState) return
  303        if (er) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt/node_modules/nopt/lib/nopt.js:
    2  
    3  var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG
    4:   ? function () { console.error.apply(console, arguments) }
    5    : function () {}
    6  
    .
  538        , parsed = actual.argv
  539      delete actual.argv
  540:     console.log(util.inspect(actual, false, 2, true), parsed.remain)
  541      for (var i in opts) {
  542        var e = JSON.stringify(opts[i])

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/eventemitter2/lib/eventemitter2.js:
  193  
  194                tree._listeners.warned = true;
  195:               console.error('(node) warning: possible EventEmitter memory ' +
  196                              'leak detected. %d listeners added. ' +
  197                              'Use emitter.setMaxListeners() to increase limit.',
  198                              tree._listeners.length);
  199:               console.trace();
  200              }
  201            }
  ...
  385  
  386            this._events[type].warned = true;
  387:           console.error('(node) warning: possible EventEmitter memory ' +
  388                          'leak detected. %d listeners added. ' +
  389                          'Use emitter.setMaxListeners() to increase limit.',
  390                          this._events[type].length);
  391:           console.trace();
  392          }
  393        }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/arguments.js:
    1  var system = require('system');
    2  if (system.args.length === 1) {
    3:     console.log('Try to pass some args when invoking this script!');
    4  } else {
    5      system.args.forEach(function (arg, i) {
    6:             console.log(i + ': ' + arg);
    7      });
    8  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/child_process-examples.js:
    5  
    6  child.stdout.on("data", function (data) {
    7:   console.log("spawnSTDOUT:", JSON.stringify(data))
    8  })
    9  
   10  child.stderr.on("data", function (data) {
   11:   console.log("spawnSTDERR:", JSON.stringify(data))
   12  })
   13  
   14  child.on("exit", function (code) {
   15:   console.log("spawnEXIT:", code)
   16  })
   17  
   ..
   19  
   20  execFile("ls", ["-lF", "/usr"], null, function (err, stdout, stderr) {
   21:   console.log("execFileSTDOUT:", JSON.stringify(stdout))
   22:   console.log("execFileSTDERR:", JSON.stringify(stderr))
   23  })
   24  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/countdown.js:
    2      interval = setInterval(function(){
    3          if ( t > 0 ) {
    4:             console.log(t--);
    5          } else {
    6:             console.log("BLAST OFF!");
    7              phantom.exit();
    8          }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/detectsniff.js:
   34  
   35  if (system.args.length === 1) {
   36:     console.log('Usage: detectsniff.js <some URL>');
   37      phantom.exit(1);
   38  } else {
   39      address = system.args[1];
   40:     console.log('Checking ' + address + '...');
   41      page.open(address, function (status) {
   42          if (status !== 'success') {
   43:             console.log('FAIL to load the address');
   44              phantom.exit();
   45          } else {
   ..
   49                  });
   50                  if (sniffed) {
   51:                     console.log('The page tried to sniff the user agent.');
   52                  } else {
   53:                     console.log('The page did not try to sniff the user agent.');
   54                  }
   55                  phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/direction.js:
    6  
    7  if (system.args.length < 3) {
    8:     console.log('Usage: direction.js origin destination');
    9:     console.log('Example: direction.js "San Diego" "Palo Alto"');
   10      phantom.exit(1);
   11  } else {
   ..
   15                  '&destination=' + dest + '&units=imperial&mode=driving&sensor=false'), function (status) {
   16          if (status !== 'success') {
   17:             console.log('Unable to access network');
   18          } else {
   19              steps = page.content.match(/<html_instructions>(.*)<\/html_instructions>/ig);
   20              if (steps == null) {
   21:                 console.log('No data available for ' + origin + ' to ' + dest);
   22              } else {
   23                  steps.forEach(function (ins) {
   ..
   25                      ins = ins.replace(/\<div/ig, '\n<div');
   26                      ins = ins.replace(/<.*?>/g, '');
   27:                     console.log(ins);
   28                  });
   29:                 console.log('');
   30:                 console.log(page.content.match(/<copyrights>.*<\/copyrights>/ig).join('').replace(/<.*?>/g, ''));
   31              }
   32          }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/echoToFile.js:
    4  
    5  if (system.args.length < 3) {
    6:     console.log("Usage: echoToFile.js DESTINATION_FILE <arguments to echo...>");
    7      phantom.exit(1);
    8  } else {
    .
   17          fs.write(system.args[1], content, 'w');
   18      } catch(e) {
   19:         console.log(e);
   20      }
   21  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/features.js:
    2  
    3  phantom.injectJs('modernizr.js');
    4: console.log('Detected features (using Modernizr ' + Modernizr._version + '):');
    5  for (feature in Modernizr) {
    6      if (Modernizr.hasOwnProperty(feature)) {
    .
   16  }
   17  
   18: console.log('');
   19: console.log('Supported:');
   20  supported.forEach(function (e) {
   21:     console.log('  ' + e);
   22  });
   23  
   24: console.log('');
   25: console.log('Not supported:');
   26  unsupported.forEach(function (e) {
   27:     console.log('  ' + e);
   28  });
   29  phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/fibo.js:
    1  var fibs = [0, 1];
    2  var ticker = window.setInterval(function () {
    3:     console.log(fibs[fibs.length - 1]);
    4      fibs.push(fibs[fibs.length - 1] + fibs[fibs.length - 2]);
    5      if (fibs.length > 10) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/follow.js:
   14      page.open('http://mobile.twitter.com/' + user, function (status) {
   15          if (status === 'fail') {
   16:             console.log(user + ': ?');
   17          } else {
   18              var data = page.evaluate(function () {
   19                  return document.querySelector('div.profile td.stat.stat-last div.statnum').innerText;
   20              });
   21:             console.log(user + ': ' + data);
   22          }
   23          page.close();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/hello.js:
    1: console.log('Hello, world!');
    2  phantom.exit();
    3  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/imagebin.js:
    6  
    7  if (system.args.length !== 2) {
    8:     console.log('Usage: imagebin.js filename');
    9      phantom.exit(1);
   10  } else {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/injectme.js:
    4      var page = require('webpage').create();
    5  
    6:     // Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
    7      page.onConsoleMessage = function(msg) {
    8:         console.log(msg);
    9      };
   10      
   11      page.onAlert = function(msg) {
   12:         console.log(msg);
   13      };
   14      
   15:     console.log("* Script running in the Phantom context.");
   16:     console.log("* Script will 'inject' itself in a page...");
   17      page.open("about:blank", function(status) {
   18          if ( status === "success" ) {
   19:             console.log(page.injectJs("injectme.js") ? "... done injecting itself!" : "... fail! Check the $PWD?!");
   20          }
   21          phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/ipgeocode.js:
    5      if (data.region_name.length > 0)
    6          loc = loc + ', ' + data.region_name;
    7:     console.log('IP address: ' + data.ip);
    8:     console.log('Estimated location: ' + loc);
    9      phantom.exit();
   10  };

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/loadspeed.js:
    4  
    5  if (system.args.length === 1) {
    6:     console.log('Usage: loadspeed.js <some URL>');
    7      phantom.exit(1);
    8  } else {
    .
   11      page.open(address, function (status) {
   12          if (status !== 'success') {
   13:             console.log('FAIL to load the address');
   14          } else {
   15              t = Date.now() - t;
   16:             console.log('Page title is ' + page.evaluate(function () {
   17                  return document.title;
   18              }));
   19:             console.log('Loading time ' + t + ' msec');
   20          }
   21          phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/loadurlwithoutcss.js:
    3  
    4  if (system.args.length < 2) {
    5:     console.log('Usage: loadurlwithoutcss.js URL');
    6      phantom.exit();
    7  }
    .
   11  page.onResourceRequested = function(requestData, request) {
   12      if ((/http:\/\/.+?\.css/gi).test(requestData['url']) || requestData['Content-Type'] == 'text/css') {
   13:         console.log('The url of the request is matching. Aborting: ' + requestData['url']);
   14          request.abort();
   15      }
   ..
   20          phantom.exit();
   21      } else {
   22:         console.log('Unable to load the address!');
   23          phantom.exit();
   24      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/module.js:
    1  var universe = require('./universe');
    2  universe.start();
    3: console.log('The answer is' + universe.answer);
    4  phantom.exit();
    5  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/movies.js:
    5      var list = data.query.results.movie;
    6      list.forEach(function (item) {
    7:         console.log(item.title + ' [' + item.rating.MPAA.content + ']');
    8      });
    9      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/netlog.js:
    4  
    5  if (system.args.length === 1) {
    6:     console.log('Usage: netlog.js <some URL>');
    7      phantom.exit(1);
    8  } else {
    .
   10  
   11      page.onResourceRequested = function (req) {
   12:         console.log('requested: ' + JSON.stringify(req, undefined, 4));
   13      };
   14  
   15      page.onResourceReceived = function (res) {
   16:         console.log('received: ' + JSON.stringify(res, undefined, 4));
   17      };
   18  
   19      page.open(address, function (status) {
   20          if (status !== 'success') {
   21:             console.log('FAIL to load the address');
   22          }
   23          phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/netsniff.js:
   98  
   99  if (system.args.length === 1) {
  100:     console.log('Usage: netsniff.js <some URL>');
  101      phantom.exit(1);
  102  } else {
  ...
  129          var har;
  130          if (status !== 'success') {
  131:             console.log('FAIL to load the address');
  132              phantom.exit(1);
  133          } else {
  ...
  137              });
  138              har = createHAR(page.address, page.title, page.startTime, page.resources);
  139:             console.log(JSON.stringify(har, undefined, 4));
  140              phantom.exit();
  141          }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/outputEncoding.js:
    1  function helloWorld() {
    2: 	console.log(phantom.outputEncoding + ": こんにちは、世界！");
    3  }
    4  
    5: console.log("Using default encoding...");
    6  helloWorld();
    7  
    8: console.log("\nUsing other encodings...");
    9  
   10  var encodings = ["euc-jp", "sjis", "utf8", "System"];

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/page_events.js:
   33      var i, ilen;
   34      for (i = 0, ilen = arguments.length; i < ilen; ++i) {
   35:         console.log("    arguments[" + i + "] = " + JSON.stringify(arguments[i]));
   36      }
   37:     console.log("");
   38  }
   39  
   ..
   41  
   42  page.onInitialized = function() {
   43:     console.log("page.onInitialized");
   44      printArgs.apply(this, arguments);
   45  };
   46  page.onLoadStarted = function() {
   47:     console.log("page.onLoadStarted");
   48      printArgs.apply(this, arguments);
   49  };
   50  page.onLoadFinished = function() {
   51:     console.log("page.onLoadFinished");
   52      printArgs.apply(this, arguments);
   53  };
   54  page.onUrlChanged = function() {
   55:     console.log("page.onUrlChanged");
   56      printArgs.apply(this, arguments);
   57  };
   58  page.onNavigationRequested = function() {
   59:     console.log("page.onNavigationRequested");
   60      printArgs.apply(this, arguments);
   61  };
   ..
   63  if (logResources === true) {
   64      page.onResourceRequested = function() {
   65:         console.log("page.onResourceRequested");
   66          printArgs.apply(this, arguments);
   67      };
   68      page.onResourceReceived = function() {
   69:         console.log("page.onResourceReceived");
   70          printArgs.apply(this, arguments);
   71      };
   ..
   73  
   74  page.onClosing = function() {
   75:     console.log("page.onClosing");
   76      printArgs.apply(this, arguments);
   77  };
   78  
   79: // window.console.log(msg);
   80  page.onConsoleMessage = function() {
   81:     console.log("page.onConsoleMessage");
   82      printArgs.apply(this, arguments);
   83  };
   ..
   85  // window.alert(msg);
   86  page.onAlert = function() {
   87:     console.log("page.onAlert");
   88      printArgs.apply(this, arguments);
   89  };
   90  // var confirmed = window.confirm(msg);
   91  page.onConfirm = function() {
   92:     console.log("page.onConfirm");
   93      printArgs.apply(this, arguments);
   94  };
   95  // var user_value = window.prompt(msg, default_value);
   96  page.onPrompt = function() {
   97:     console.log("page.onPrompt");
   98      printArgs.apply(this, arguments);
   99  };
  ...
  102  
  103  setTimeout(function() {
  104:     console.log("");
  105:     console.log("### STEP 1: Load '" + step1url + "'");
  106      page.open(step1url);
  107  }, 0);
  108  
  109  setTimeout(function() {
  110:     console.log("");
  111:     console.log("### STEP 2: Load '" + step2url + "' (load same URL plus FRAGMENT)");
  112      page.open(step2url);
  113  }, 5000);
  114  
  115  setTimeout(function() {
  116:     console.log("");
  117:     console.log("### STEP 3: Click on page internal link (aka FRAGMENT)");
  118      page.evaluate(function() {
  119          var ev = document.createEvent("MouseEvents");
  ...
  124  
  125  setTimeout(function() {
  126:     console.log("");
  127:     console.log("### STEP 4: Click on page external link");
  128      page.evaluate(function() {
  129          var ev = document.createEvent("MouseEvents");
  ...
  134  
  135  setTimeout(function() {
  136:     console.log("");
  137:     console.log("### STEP 5: Close page and shutdown (with a delay)");
  138      page.close();
  139      setTimeout(function(){

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/pagecallback.js:
    1  var p = require("webpage").create();
    2  
    3: p.onConsoleMessage = function(msg) { console.log(msg); };
    4  
    5  // Calls to "callPhantom" within the page 'p' arrive here
    6  p.onCallback = function(msg) {
    7:     console.log("Received by the 'phantom' main context: "+msg);
    8      return "Hello there, I'm coming to you from the 'phantom' context instead";
    9  };
   ..
   12      // Return-value of the "onCallback" handler arrive here
   13      var callbackResponse = window.callPhantom("Hello, I'm coming to you from the 'page' context");
   14:     console.log("Received by the 'page' context: "+callbackResponse);
   15  });
   16  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/phantomwebintro.js:
    4  
    5  page.onConsoleMessage = function(msg) {
    6:     console.log(msg);
    7  };
    8  
    .
   11          page.includeJs("http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js", function() {
   12              page.evaluate(function() {
   13:                 console.log("$(\"#intro\").text() -> " + $("#intro").text());
   14              });
   15              phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/pizza.js:
    6  page.open(url, function (status) {
    7      if (status !== 'success') {
    8:         console.log('Unable to access network');
    9      } else {
   10          var results = page.evaluate(function() {
   ..
   15              return pizza;
   16          });
   17:         console.log(results.join('\n'));
   18      }
   19      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/post.js:
    7  page.open(server, 'post', data, function (status) {
    8      if (status !== 'success') {
    9:         console.log('Unable to post!');
   10      } else {
   11:         console.log(page.content);
   12      }
   13      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/postserver.js:
    7  
    8  if (system.args.length !== 2) {
    9:     console.log('Usage: postserver.js <portnumber>');
   10      phantom.exit(1);
   11  }
   ..
   14  
   15  service = server.listen(port, function (request, response) {
   16:     console.log('Request received at ' + new Date());
   17  
   18      response.statusCode = 200;
   ..
   27  page.open('http://localhost:' + port + '/', 'post', data, function (status) {
   28      if (status !== 'success') {
   29:         console.log('Unable to post!');
   30      } else {
   31:         console.log(page.plainText);
   32      }
   33      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/printenv.js:
    5  for (key in env) {
    6      if (env.hasOwnProperty(key)) {
    7:         console.log(key + '=' + env[key]);
    8      }
    9  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/printheaderfooter.js:
    7  
    8  if (system.args.length < 3) {
    9:     console.log('Usage: printheaderfooter.js URL filename');
   10      phantom.exit(1);
   11  } else {
   ..
   38      page.open(address, function (status) {
   39          if (status !== 'success') {
   40:             console.log('Unable to load the address!');
   41          } else {
   42              /* check whether the loaded page overwrites the header/footer setting,
   ..
   78                  });
   79                  page.paperSize = paperSize;
   80:                 console.log(page.paperSize.header.height);
   81:                 console.log(page.paperSize.footer.height);
   82              }
   83              window.setTimeout(function () {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/printmargins.js:
    3  
    4  if (system.args.length < 7) {
    5:     console.log('Usage: printmargins.js URL filename LEFT TOP RIGHT BOTTOM');
    6:     console.log('  margin examples: "1cm", "10px", "7mm", "5in"');
    7      phantom.exit(1);
    8  } else {
    .
   25      page.open(address, function (status) {
   26          if (status !== 'success') {
   27:             console.log('Unable to load the address!');
   28          } else {
   29              window.setTimeout(function () {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/rasterize.js:
    4  
    5  if (system.args.length < 3 || system.args.length > 5) {
    6:     console.log('Usage: rasterize.js URL filename [paperwidth*paperheight|paperformat] [zoom]');
    7:     console.log('  paper (pdf output) examples: "5in*7.5in", "10cm*20cm", "A4", "Letter"');
    8      phantom.exit(1);
    9  } else {
   ..
   21      page.open(address, function (status) {
   22          if (status !== 'success') {
   23:             console.log('Unable to load the address!');
   24              phantom.exit();
   25          } else {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/render_multi_url.js:
   59      arrayOfUrls = Array.prototype.slice.call(system.args, 1);
   60  } else {
   61:     console.log("Usage: phantomjs render_multi_url.js [domain.name1, domain.name2, ...]");
   62      arrayOfUrls = ["www.google.com", "www.bbc.co.uk", "www.phantomjs.org"];
   63  }
   ..
   65  RenderUrlsToFile(arrayOfUrls, (function(status, url, file) {
   66      if (status !== "success") {
   67:         return console.log("Unable to render '" + url + "'");
   68      } else {
   69:         return console.log("Rendered '" + url + "' at '" + file + "'");
   70      }
   71  }), function() {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/run-jasmine.js:
   24                  if(!condition) {
   25                      // If condition still not fulfilled (timeout but condition is 'false')
   26:                     console.log("'waitFor()' timeout");
   27                      phantom.exit(1);
   28                  } else {
   29                      // Condition fulfilled (timeout and/or condition is 'true')
   30:                     console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
   31                      typeof(onReady) === "string" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled
   32                      clearInterval(interval); //< Stop this interval
   ..
   38  
   39  if (system.args.length !== 2) {
   40:     console.log('Usage: run-jasmine.js URL');
   41      phantom.exit(1);
   42  }
   ..
   44  var page = require('webpage').create();
   45  
   46: // Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
   47  page.onConsoleMessage = function(msg) {
   48:     console.log(msg);
   49  };
   50  
   51  page.open(system.args[1], function(status){
   52      if (status !== "success") {
   53:         console.log("Unable to access network");
   54          phantom.exit();
   55      } else {
   ..
   60          }, function(){
   61              var exitCode = page.evaluate(function(){
   62:                 console.log('');
   63:                 console.log(document.body.querySelector('.description').innerText);
   64                  var list = document.body.querySelectorAll('.results > #details > .specDetail.failed');
   65                  if (list && list.length > 0) {
   66:                   console.log('');
   67:                   console.log(list.length + ' test(s) FAILED:');
   68                    for (i = 0; i < list.length; ++i) {
   69                        var el = list[i],
   70                            desc = el.querySelector('.description'),
   71                            msg = el.querySelector('.resultMessage.fail');
   72:                       console.log('');
   73:                       console.log(desc.innerText);
   74:                       console.log(msg.innerText);
   75:                       console.log('');
   76                    }
   77                    return 1;
   78                  } else {
   79:                   console.log(document.body.querySelector('.alert > .passingAlert.bar').innerText);
   80                    return 0;
   81                  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/run-qunit.js:
   24                  if(!condition) {
   25                      // If condition still not fulfilled (timeout but condition is 'false')
   26:                     console.log("'waitFor()' timeout");
   27                      phantom.exit(1);
   28                  } else {
   29                      // Condition fulfilled (timeout and/or condition is 'true')
   30:                     console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
   31                      typeof(onReady) === "string" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled
   32                      clearInterval(interval); //< Stop this interval
   ..
   38  
   39  if (system.args.length !== 2) {
   40:     console.log('Usage: run-qunit.js URL');
   41      phantom.exit(1);
   42  }
   ..
   44  var page = require('webpage').create();
   45  
   46: // Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
   47  page.onConsoleMessage = function(msg) {
   48:     console.log(msg);
   49  };
   50  
   51  page.open(system.args[1], function(status){
   52      if (status !== "success") {
   53:         console.log("Unable to access network");
   54          phantom.exit(1);
   55      } else {
   ..
   65              var failedNum = page.evaluate(function(){
   66                  var el = document.getElementById('qunit-testresult');
   67:                 console.log(el.innerText);
   68                  try {
   69                      return el.getElementsByClassName('failed')[0].innerHTML;

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/scandir.js:
    3  
    4  if (system.args.length !== 2) {
    5:     console.log("Usage: phantomjs scandir.js DIRECTORY_TO_SCAN");
    6      phantom.exit(1);
    7  }
    .
   10      var fs = require('fs');
   11      if (fs.exists(path) && fs.isFile(path)) {
   12:         console.log(path);
   13      } else if (fs.isDirectory(path)) {
   14          fs.list(path).forEach(function (e) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/seasonfood.js:
    8                   'October', 'November', 'December'];
    9      list.forEach(function (item) {
   10:         console.log([item.name.replace(/\s/ig, ' '), ':',
   11                    names[item.atItsBestUntil], 'to',
   12                    names[item.atItsBestFrom]].join(' '));

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/server.js:
    5  
    6  if (system.args.length !== 2) {
    7:     console.log('Usage: server.js <some port>');
    8      phantom.exit(1);
    9  } else {
   10      port = system.args[1];
   11      var listening = server.listen(port, function (request, response) {
   12:         console.log("GOT HTTP REQUEST");
   13:         console.log(JSON.stringify(request, null, 4));
   14  
   15          // we set the headers here
   ..
   26      });
   27      if (!listening) {
   28:         console.log("could not create web server listening on port " + port);
   29          phantom.exit();
   30      }
   31      var url = "http://localhost:" + port + "/foo/bar.php?asdf=true";
   32:     console.log("SENDING REQUEST TO:");
   33:     console.log(url);
   34      page.open(url, function (status) {
   35          if (status !== 'success') {
   36:             console.log('FAIL to load the address');
   37          } else {
   38:             console.log("GOT REPLY FROM SERVER:");
   39:             console.log(page.content);
   40          }
   41          phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/serverkeepalive.js:
    3  
    4  if (system.args.length !== 2) {
    5:     console.log('Usage: serverkeepalive.js <portnumber>');
    6      phantom.exit(1);
    7  } else {
    .
   10  
   11      service = server.listen(port, { keepAlive: true }, function (request, response) {
   12:         console.log('Request at ' + new Date());
   13:         console.log(JSON.stringify(request, null, 4));
   14  
   15          var body = JSON.stringify(request, null, 4);
   ..
   27  
   28      if (service) {
   29:         console.log('Web server running on port ' + port);
   30      } else {
   31:         console.log('Error: Could not create web server listening on port ' + port);
   32          phantom.exit();
   33      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/simpleserver.js:
    3  
    4  if (system.args.length !== 2) {
    5:     console.log('Usage: simpleserver.js <portnumber>');
    6      phantom.exit(1);
    7  } else {
    .
   11      service = server.listen(port, function (request, response) {
   12  
   13:         console.log('Request at ' + new Date());
   14:         console.log(JSON.stringify(request, null, 4));
   15  
   16          response.statusCode = 200;
   ..
   35  
   36      if (service) {
   37:         console.log('Web server running on port ' + port);
   38      } else {
   39:         console.log('Error: Could not create web server listening on port ' + port);
   40          phantom.exit();
   41      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/sleepsort.js:
    8          setTimeout((function(j){
    9              return function() {
   10:                 console.log(array[j]);
   11                  ++sortedCount;
   12                  (len === sortedCount) && callback();
   ..
   17  
   18  if ( system.args < 2 ) {
   19:     console.log("Usage: phantomjs sleepsort.js PUT YOUR INTEGERS HERE SEPARATED BY SPACES");
   20      phantom.exit(1);
   21  } else {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/technews.js:
    3  page.open('http://news.google.com/news/i/section?&topic=t', function (status) {
    4      if (status !== 'success') {
    5:         console.log('Unable to access the network!');
    6      } else {
    7          page.evaluate(function () {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/tweets.js:
    5      twitterId = "PhantomJS"; //< default value
    6  
    7: // Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
    8  page.onConsoleMessage = function(msg) {
    9:     console.log(msg);
   10  };
   11  
   12  // Print usage message, if no twitter ID is passed
   13  if (system.args.length < 2) {
   14:     console.log("Usage: tweets.js [twitter ID]");
   15  } else {
   16      twitterId = system.args[1];
   ..
   18  
   19  // Heading
   20: console.log("*** Latest tweets from @" + twitterId + " ***\n");
   21  
   22  // Open Twitter Mobile and, onPageLoad, do...
   ..
   24      // Check for page load success
   25      if (status !== "success") {
   26:         console.log("Unable to access network");
   27      } else {
   28          // Execute some DOM inspection within the page context
   ..
   30              var list = document.querySelectorAll('div.tweet-text');
   31              for (var i = 0; i < list.length; ++i) {
   32:                 console.log((i + 1) + ": " + list[i].innerText);
   33              }
   34          });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/universe.js:
    6  
    7  exports.start = function () {
    8:     console.log('Starting the universe....');
    9  }
   10  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/unrandomize.js:
   15      var result;
   16      if (status !== 'success') {
   17:         console.log('Network error.');
   18      } else {
   19:         console.log(page.evaluate(function () {
   20              return document.getElementById('numbers').textContent;
   21          }));

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/useragent.js:
    1  var page = require('webpage').create();
    2: console.log('The default user agent is ' + page.settings.userAgent);
    3  page.settings.userAgent = 'SpecialAgent';
    4  page.open('http://www.httpuseragent.org', function (status) {
    5      if (status !== 'success') {
    6:         console.log('Unable to access network');
    7      } else {
    8          var ua = page.evaluate(function () {
    9              return document.getElementById('myagent').innerText;
   10          });
   11:         console.log(ua);
   12      }
   13      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/version.js:
    1: console.log('using PhantomJS version ' +
    2    phantom.version.major + '.' +
    3    phantom.version.minor + '.' +

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/waitfor.js:
   22                  if(!condition) {
   23                      // If condition still not fulfilled (timeout but condition is 'false')
   24:                     console.log("'waitFor()' timeout");
   25                      phantom.exit(1);
   26                  } else {
   27                      // Condition fulfilled (timeout and/or condition is 'true')
   28:                     console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
   29                      typeof(onReady) === "string" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled
   30                      clearInterval(interval); //< Stop this interval
   ..
   41      // Check for page load success
   42      if (status !== "success") {
   43:         console.log("Unable to access network");
   44      } else {
   45          // Wait for 'signin-dropdown' to be visible
   ..
   50              });
   51          }, function() {
   52:            console.log("The sign-in dialog should be visible now.");
   53             phantom.exit();
   54          });        

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/walk_through_frames.js:
   14  
   15  p.open("../test/webpage-spec-frames/index.html", function(status) {
   16:     console.log("pageTitle(): " + pageTitle(p));
   17:     console.log("currentFrameName(): "+p.currentFrameName());
   18:     console.log("childFramesCount(): "+p.childFramesCount());
   19:     console.log("childFramesName(): "+p.childFramesName());
   20:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   21:     console.log("");
   22  
   23:     console.log("p.switchToChildFrame(\"frame1\"): "+p.switchToChildFrame("frame1"));
   24:     console.log("pageTitle(): " + pageTitle(p));
   25:     console.log("currentFrameName(): "+p.currentFrameName());
   26:     console.log("childFramesCount(): "+p.childFramesCount());
   27:     console.log("childFramesName(): "+p.childFramesName());
   28:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   29:     console.log("");
   30  
   31:     console.log("p.switchToChildFrame(\"frame1-2\"): "+p.switchToChildFrame("frame1-2"));
   32:     console.log("pageTitle(): " + pageTitle(p));
   33:     console.log("currentFrameName(): "+p.currentFrameName());
   34:     console.log("childFramesCount(): "+p.childFramesCount());
   35:     console.log("childFramesName(): "+p.childFramesName());
   36:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   37:     console.log("");
   38  
   39:     console.log("p.switchToParentFrame(): "+p.switchToParentFrame());
   40:     console.log("pageTitle(): " + pageTitle(p));
   41:     console.log("currentFrameName(): "+p.currentFrameName());
   42:     console.log("childFramesCount(): "+p.childFramesCount());
   43:     console.log("childFramesName(): "+p.childFramesName());
   44:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   45:     console.log("");
   46  
   47:     console.log("p.switchToChildFrame(0): "+p.switchToChildFrame(0));
   48:     console.log("pageTitle(): " + pageTitle(p));
   49:     console.log("currentFrameName(): "+p.currentFrameName());
   50:     console.log("childFramesCount(): "+p.childFramesCount());
   51:     console.log("childFramesName(): "+p.childFramesName());
   52:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   53:     console.log("");
   54  
   55:     console.log("p.switchToMainFrame()"); p.switchToMainFrame();
   56:     console.log("pageTitle(): " + pageTitle(p));
   57:     console.log("currentFrameName(): "+p.currentFrameName());
   58:     console.log("childFramesCount(): "+p.childFramesCount());
   59:     console.log("childFramesName(): "+p.childFramesName());
   60:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   61:     console.log("");
   62  
   63:     console.log("p.switchToChildFrame(\"frame2\"): "+p.switchToChildFrame("frame2"));
   64:     console.log("pageTitle(): " + pageTitle(p));
   65:     console.log("currentFrameName(): "+p.currentFrameName());
   66:     console.log("childFramesCount(): "+p.childFramesCount());
   67:     console.log("childFramesName(): "+p.childFramesName());
   68:     console.log("setPageTitle(CURRENT TITLE+'-visited')"); setPageTitle(p, pageTitle(p) + "-visited");
   69:     console.log("");
   70  
   71      phantom.exit();

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/examples/weather.js:
   10  url = encodeURI('http://api.openweathermap.org/data/2.1/find/name?q=' + city);
   11  
   12: console.log('Checking weather condition for', city, '...');
   13  
   14  page.open(url, function(status) {
   15      var result, data;
   16      if (status !== 'success') {
   17:         console.log('Error: Unable to access network!');
   18      } else {
   19          result = page.evaluate(function () {
   ..
   23              data = JSON.parse(result);
   24              data = data.list[0];
   25:             console.log('');
   26:             console.log('City:', data.name);
   27:             console.log('Condition:', data.weather.map(function(entry) {
   28                  return entry.main;
   29              }).join(', '));
   30:             console.log('Temperature:', Math.round(data.main.temp - 273.15), 'C');
   31:             console.log('Humidity:', Math.round(data.main.humidity), '%');
   32          } catch (e) {
   33:             console.log('Error:', e.toString());
   34          }
   35      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/npmconf/node_modules/nopt/lib/nopt.js:
    2  
    3  var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG
    4:   ? function () { console.error.apply(console, arguments) }
    5    : function () {}
    6  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/lib/debug.js:
    4  function debug () {
    5    if (/\brequest\b/.test(process.env.NODE_DEBUG))
    6:     console.error('REQUEST %s', util.format.apply(util, arguments))
    7  }
    8  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/node_modules/form-data/node_modules/async/lib/async.js:
    7   */
    8  /*jshint onevar: false, indent:4 */
    9: /*global setImmediate: false, setTimeout: false, console: false */
   10  (function () {
   11  
   ..
  966      };
  967  
  968:     var _console_fn = function (name) {
  969          return function (fn) {
  970              var args = Array.prototype.slice.call(arguments, 1);
  971              fn.apply(null, args.concat([function (err) {
  972                  var args = Array.prototype.slice.call(arguments, 1);
  973:                 if (typeof console !== 'undefined') {
  974                      if (err) {
  975:                         if (console.error) {
  976:                             console.error(err);
  977                          }
  978                      }
  979:                     else if (console[name]) {
  980                          _each(args, function (x) {
  981:                             console[name](x);
  982                          });
  983                      }
  ...
  986          };
  987      };
  988:     async.log = _console_fn('log');
  989:     async.dir = _console_fn('dir');
  990:     /*async.info = _console_fn('info');
  991:     async.warn = _console_fn('warn');
  992:     async.error = _console_fn('error');*/
  993  
  994      async.memoize = function (fn, hasher) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/node_modules/hawk/node_modules/hoek/lib/index.js:
  364          stack = exports.displayStack(1).join('\n\t');
  365      }
  366:     console.log('ABORT: ' + message + '\n\t' + stack);
  367      process.exit(1);
  368  };
  ...
  538  */
  539  
  540: exports.consoleFunc = console.log;
  541  
  542  exports.printEvent = function (event) {
  ...
  569  
  570      var output = timestring + ', ' + event.tags[0] + ', ' + data;
  571:     exports.consoleFunc(output);
  572  };
  573  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/node_modules/http-signature/lib/util.js:
  143      y = tmp.data;
  144    } catch (e) {
  145:     console.log(e.stack);
  146      throw new Error('Invalid ssh key: ' + key);
  147    }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/node_modules/request/node_modules/tough-cookie/lib/cookie.js:
   30    punycode = require('punycode');
   31  } catch(e) {
   32:   console.warn("cookie: can't load punycode; won't use punycode for domain normalization");
   33  }
   34  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/mocha.js:
  132      if (!_reporter) try { _reporter = require(reporter); } catch (err) {};
  133      if (!_reporter && reporter === 'teamcity')
  134:       console.warn('The Teamcity reporter was moved to a package named ' +
  135          'mocha-teamcity-reporter ' +
  136          '(https://npmjs.org/package/mocha-teamcity-reporter).');

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/base.js:
  156  
  157  exports.list = function(failures){
  158:   console.error();
  159    failures.forEach(function(test, i){
  160      // format
  ...
  202        .replace(/^/gm, '  ');
  203  
  204:     console.error(fmt, (i + 1), test.fullTitle(), msg, stack);
  205    });
  206  };
  ...
  284    var fmt;
  285  
  286:   console.log();
  287  
  288    // passes
  ...
  291      + color('light', ' (%s)');
  292  
  293:   console.log(fmt,
  294      stats.passes || 0,
  295      ms(stats.duration));
  ...
  300        + color('pending', ' %d pending');
  301  
  302:     console.log(fmt, stats.pending);
  303    }
  304  
  ...
  307      fmt = color('fail', '  %d failing');
  308  
  309:     console.error(fmt,
  310        stats.failures);
  311  
  312      Base.list(this.failures);
  313:     console.error();
  314    }
  315  
  316:   console.log();
  317  };
  318  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/doc.js:
   35      if (suite.root) return;
   36      ++indents;
   37:     console.log('%s<section class="suite">', indent());
   38      ++indents;
   39:     console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));
   40:     console.log('%s<dl>', indent());
   41    });
   42  
   43    runner.on('suite end', function(suite){
   44      if (suite.root) return;
   45:     console.log('%s</dl>', indent());
   46      --indents;
   47:     console.log('%s</section>', indent());
   48      --indents;
   49    });
   50  
   51    runner.on('pass', function(test){
   52:     console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));
   53      var code = utils.escape(utils.clean(test.fn.toString()));
   54:     console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);
   55    });
   56  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/dot.js:
   51  
   52    runner.on('end', function(){
   53:     console.log();
   54      self.epilogue();
   55    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/json-stream.js:
   28  
   29    runner.on('start', function(){
   30:     console.log(JSON.stringify(['start', { total: total }]));
   31    });
   32  
   33    runner.on('pass', function(test){
   34:     console.log(JSON.stringify(['pass', clean(test)]));
   35    });
   36  
   37    runner.on('fail', function(test, err){
   38:     console.log(JSON.stringify(['fail', clean(test)]));
   39    });
   40  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/landing.js:
   86    runner.on('end', function(){
   87      cursor.show();
   88:     console.log();
   89      self.epilogue();
   90    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/list.js:
   29  
   30    runner.on('start', function(){
   31:     console.log();
   32    });
   33  
   ..
   39      var fmt = color('checkmark', '  -')
   40        + color('pending', ' %s');
   41:     console.log(fmt, test.fullTitle());
   42    });
   43  
   ..
   47        + color(test.speed, '%dms');
   48      cursor.CR();
   49:     console.log(fmt, test.fullTitle(), test.duration);
   50    });
   51  
   52    runner.on('fail', function(test, err){
   53      cursor.CR();
   54:     console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());
   55    });
   56  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/progress.js:
   48    // tests started
   49    runner.on('start', function(){
   50:     console.log();
   51      cursor.hide();
   52    });
   ..
   75    runner.on('end', function(){
   76      cursor.show();
   77:     console.log();
   78      self.epilogue();
   79    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/spec.js:
   34  
   35    runner.on('start', function(){
   36:     console.log();
   37    });
   38  
   39    runner.on('suite', function(suite){
   40      ++indents;
   41:     console.log(color('suite', '%s%s'), indent(), suite.title);
   42    });
   43  
   44    runner.on('suite end', function(suite){
   45      --indents;
   46:     if (1 == indents) console.log();
   47    });
   48  
   49    runner.on('pending', function(test){
   50      var fmt = indent() + color('pending', '  - %s');
   51:     console.log(fmt, test.title);
   52    });
   53  
   ..
   58          + color('pass', ' %s ');
   59        cursor.CR();
   60:       console.log(fmt, test.title);
   61      } else {
   62        var fmt = indent()
   ..
   65          + color(test.speed, '(%dms)');
   66        cursor.CR();
   67:       console.log(fmt, test.title, test.duration);
   68      }
   69    });
   ..
   71    runner.on('fail', function(test, err){
   72      cursor.CR();
   73:     console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
   74    });
   75  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/tap.js:
   32    runner.on('start', function(){
   33      var total = runner.grepTotal(runner.suite);
   34:     console.log('%d..%d', 1, total);
   35    });
   36  
   ..
   40  
   41    runner.on('pending', function(test){
   42:     console.log('ok %d %s # SKIP -', n, title(test));
   43    });
   44  
   45    runner.on('pass', function(test){
   46      passes++;
   47:     console.log('ok %d %s', n, title(test));
   48    });
   49  
   50    runner.on('fail', function(test, err){
   51      failures++;
   52:     console.log('not ok %d %s', n, title(test));
   53:     if (err.stack) console.log(err.stack.replace(/^/gm, '  '));
   54    });
   55  
   56    runner.on('end', function(){
   57:     console.log('# tests ' + (passes + failures));
   58:     console.log('# pass ' + passes);
   59:     console.log('# fail ' + failures);
   60    });
   61  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/lib/reporters/xunit.js:
   50  
   51    runner.on('end', function(){
   52:     console.log(tag('testsuite', {
   53          name: 'Mocha Tests'
   54        , tests: stats.tests
   ..
   61  
   62      tests.forEach(test);
   63:     console.log('</testsuite>');
   64    });
   65  }
   ..
   85      var err = test.err;
   86      attrs.message = escape(err.message);
   87:     console.log(tag('testcase', attrs, false, tag('failure', attrs, false, cdata(err.stack))));
   88    } else if (test.pending) {
   89:     console.log(tag('testcase', attrs, false, tag('skipped', {}, true)));
   90    } else {
   91:     console.log(tag('testcase', attrs, true) );
   92    }
   93  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/node_modules/debug/lib/debug.js:
  109        + ' +' + humanize(ms) + '\u001b[0m';
  110  
  111:     console.log.apply(this, arguments);
  112    }
  113  
  ...
  117      fmt = new Date().toUTCString()
  118        + ' ' + name + ' ' + fmt;
  119:     console.log.apply(this, arguments);
  120    }
  121  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/node_modules/jade/lib/jade.js:
  103      // Debug compiler
  104      if (options.debug) {
  105:       console.error('\nCompiled Function:\n\n\033[90m%s\033[0m', js.replace(/^/gm, '  '));
  106      }
  107  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha/node_modules/mocha/node_modules/jade/node_modules/commander/lib/commander.js:
  122   *        .description('run remote setup commands')
  123   *        .action(function(){
  124:  *          console.log('setup');
  125   *        });
  126   *     
  ...
  129   *        .description('run the given remote command')
  130   *        .action(function(cmd){
  131:  *          console.log('exec "%s"', cmd);
  132   *        });
  133   *     
  ...
  136   *        .description('deploy the given env')
  137   *        .action(function(env){
  138:  *          console.log('deploying "%s"', env);
  139   *        });
  140   *     
  ...
  518  
  519  Command.prototype.missingArgument = function(name){
  520:   console.error();
  521:   console.error("  error: missing required argument `%s'", name);
  522:   console.error();
  523    process.exit(1);
  524  };
  ...
  533  
  534  Command.prototype.optionMissingArgument = function(option, flag){
  535:   console.error();
  536    if (flag) {
  537:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  538    } else {
  539:     console.error("  error: option `%s' argument missing", option.flags);
  540    }
  541:   console.error();
  542    process.exit(1);
  543  };
  ...
  551  
  552  Command.prototype.unknownOption = function(flag){
  553:   console.error();
  554:   console.error("  error: unknown option `%s'", flag);
  555:   console.error();
  556    process.exit(1);
  557  };
  ...
  575    this.option(flags, 'output the version number');
  576    this.on('version', function(){
  577:     console.log(str);
  578      process.exit(0);
  579    });
  ...
  768  Command.prototype.promptMultiLine = function(str, fn){
  769    var buf = [];
  770:   console.log(str);
  771    process.stdin.setEncoding('utf8');
  772    process.stdin.on('data', function(val){
  ...
  792   *
  793   *     program.prompt('Username: ', function(name){
  794:  *       console.log('hi %s', name);
  795   *     });
  796   *     
  797   *     program.prompt('Description:', function(desc){
  798:  *       console.log('description was "%s"', desc.trim());
  799   *     });
  800   *
  ...
  838   *
  839   *     program.password('Password: ', function(pass){
  840:  *       console.log('got "%s"', pass);
  841   *       process.stdin.destroy();
  842   *     });
  843   *
  844   *     program.password('Password: ', '*', function(pass){
  845:  *       console.log('got "%s"', pass);
  846   *       process.stdin.destroy();
  847   *     });
  ...
  870    process.stdin.on('keypress', function(c, key){
  871      if (key && 'enter' == key.name) {
  872:       console.log();
  873        process.stdin.removeAllListeners('keypress');
  874        tty.setRawMode(false);
  ...
  879  
  880      if (key && key.ctrl && 'c' == key.name) {
  881:       console.log('%s', buf);
  882        process.exit();
  883      }
  ...
  894   *
  895   *      program.confirm('continue? ', function(ok){
  896:  *        console.log(' got %j', ok);
  897   *        process.stdin.destroy();
  898   *      });
  ...
  922   *      var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];
  923   *      
  924:  *      console.log('Choose the coolest pet:');
  925   *      program.choose(list, function(i){
  926:  *        console.log('you chose %d "%s"', i, list[i]);
  927   *        process.stdin.destroy();
  928   *      });
  ...
  945    list.forEach(function(item, i){
  946      if (hasDefault && i == index) {
  947:       console.log('* %d) %s', i + 1, item);
  948      } else {
  949:       console.log('  %d) %s', i + 1, item);
  950      }
  951    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/fs-extra/lib/index.js:
   78  //deprecated
   79  fs.touch = function touch() {
   80:   console.log('fs.touch() is deprecated. Please use fs.createFile().')
   81    fs.createFile.apply(null, arguments)
   82  }
   83  
   84  fs.touchSync = function touchSync() {
   85:   console.log('fs.touchSync() is deprecated. Please use fs.createFileSync().')
   86    fs.createFileSync.apply(null, arguments)
   87  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/mocha.js:
  132      if (!_reporter) try { _reporter = require(reporter); } catch (err) {};
  133      if (!_reporter && reporter === 'teamcity')
  134:       console.warn('The Teamcity reporter was moved to a package named ' +
  135          'mocha-teamcity-reporter ' +
  136          '(https://npmjs.org/package/mocha-teamcity-reporter).');

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/base.js:
  156  
  157  exports.list = function(failures){
  158:   console.error();
  159    failures.forEach(function(test, i){
  160      // format
  ...
  202        .replace(/^/gm, '  ');
  203  
  204:     console.error(fmt, (i + 1), test.fullTitle(), msg, stack);
  205    });
  206  };
  ...
  284    var fmt;
  285  
  286:   console.log();
  287  
  288    // passes
  ...
  291      + color('light', ' (%s)');
  292  
  293:   console.log(fmt,
  294      stats.passes || 0,
  295      ms(stats.duration));
  ...
  300        + color('pending', ' %d pending');
  301  
  302:     console.log(fmt, stats.pending);
  303    }
  304  
  ...
  307      fmt = color('fail', '  %d failing');
  308  
  309:     console.error(fmt,
  310        stats.failures);
  311  
  312      Base.list(this.failures);
  313:     console.error();
  314    }
  315  
  316:   console.log();
  317  };
  318  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/doc.js:
   35      if (suite.root) return;
   36      ++indents;
   37:     console.log('%s<section class="suite">', indent());
   38      ++indents;
   39:     console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));
   40:     console.log('%s<dl>', indent());
   41    });
   42  
   43    runner.on('suite end', function(suite){
   44      if (suite.root) return;
   45:     console.log('%s</dl>', indent());
   46      --indents;
   47:     console.log('%s</section>', indent());
   48      --indents;
   49    });
   50  
   51    runner.on('pass', function(test){
   52:     console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));
   53      var code = utils.escape(utils.clean(test.fn.toString()));
   54:     console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);
   55    });
   56  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/dot.js:
   51  
   52    runner.on('end', function(){
   53:     console.log();
   54      self.epilogue();
   55    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/json-stream.js:
   28  
   29    runner.on('start', function(){
   30:     console.log(JSON.stringify(['start', { total: total }]));
   31    });
   32  
   33    runner.on('pass', function(test){
   34:     console.log(JSON.stringify(['pass', clean(test)]));
   35    });
   36  
   37    runner.on('fail', function(test, err){
   38:     console.log(JSON.stringify(['fail', clean(test)]));
   39    });
   40  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/landing.js:
   86    runner.on('end', function(){
   87      cursor.show();
   88:     console.log();
   89      self.epilogue();
   90    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/list.js:
   29  
   30    runner.on('start', function(){
   31:     console.log();
   32    });
   33  
   ..
   39      var fmt = color('checkmark', '  -')
   40        + color('pending', ' %s');
   41:     console.log(fmt, test.fullTitle());
   42    });
   43  
   ..
   47        + color(test.speed, '%dms');
   48      cursor.CR();
   49:     console.log(fmt, test.fullTitle(), test.duration);
   50    });
   51  
   52    runner.on('fail', function(test, err){
   53      cursor.CR();
   54:     console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());
   55    });
   56  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/progress.js:
   48    // tests started
   49    runner.on('start', function(){
   50:     console.log();
   51      cursor.hide();
   52    });
   ..
   75    runner.on('end', function(){
   76      cursor.show();
   77:     console.log();
   78      self.epilogue();
   79    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/spec.js:
   34  
   35    runner.on('start', function(){
   36:     console.log();
   37    });
   38  
   39    runner.on('suite', function(suite){
   40      ++indents;
   41:     console.log(color('suite', '%s%s'), indent(), suite.title);
   42    });
   43  
   44    runner.on('suite end', function(suite){
   45      --indents;
   46:     if (1 == indents) console.log();
   47    });
   48  
   49    runner.on('pending', function(test){
   50      var fmt = indent() + color('pending', '  - %s');
   51:     console.log(fmt, test.title);
   52    });
   53  
   ..
   58          + color('pass', ' %s ');
   59        cursor.CR();
   60:       console.log(fmt, test.title);
   61      } else {
   62        var fmt = indent()
   ..
   65          + color(test.speed, '(%dms)');
   66        cursor.CR();
   67:       console.log(fmt, test.title, test.duration);
   68      }
   69    });
   ..
   71    runner.on('fail', function(test, err){
   72      cursor.CR();
   73:     console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
   74    });
   75  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/tap.js:
   32    runner.on('start', function(){
   33      var total = runner.grepTotal(runner.suite);
   34:     console.log('%d..%d', 1, total);
   35    });
   36  
   ..
   40  
   41    runner.on('pending', function(test){
   42:     console.log('ok %d %s # SKIP -', n, title(test));
   43    });
   44  
   45    runner.on('pass', function(test){
   46      passes++;
   47:     console.log('ok %d %s', n, title(test));
   48    });
   49  
   50    runner.on('fail', function(test, err){
   51      failures++;
   52:     console.log('not ok %d %s', n, title(test));
   53:     if (err.stack) console.log(err.stack.replace(/^/gm, '  '));
   54    });
   55  
   56    runner.on('end', function(){
   57:     console.log('# tests ' + (passes + failures));
   58:     console.log('# pass ' + passes);
   59:     console.log('# fail ' + failures);
   60    });
   61  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/lib/reporters/xunit.js:
   50  
   51    runner.on('end', function(){
   52:     console.log(tag('testsuite', {
   53          name: 'Mocha Tests'
   54        , tests: stats.tests
   ..
   61  
   62      tests.forEach(test);
   63:     console.log('</testsuite>');
   64    });
   65  }
   ..
   85      var err = test.err;
   86      attrs.message = escape(err.message);
   87:     console.log(tag('testcase', attrs, false, tag('failure', attrs, false, cdata(err.stack))));
   88    } else if (test.pending) {
   89:     console.log(tag('testcase', attrs, false, tag('skipped', {}, true)));
   90    } else {
   91:     console.log(tag('testcase', attrs, true) );
   92    }
   93  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/node_modules/debug/lib/debug.js:
  109        + ' +' + humanize(ms) + '\u001b[0m';
  110  
  111:     console.log.apply(this, arguments);
  112    }
  113  
  ...
  117      fmt = new Date().toUTCString()
  118        + ' ' + name + ' ' + fmt;
  119:     console.log.apply(this, arguments);
  120    }
  121  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/node_modules/jade/lib/jade.js:
  103      // Debug compiler
  104      if (options.debug) {
  105:       console.error('\nCompiled Function:\n\n\033[90m%s\033[0m', js.replace(/^/gm, '  '));
  106      }
  107  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-mocha-test/node_modules/mocha/node_modules/jade/node_modules/commander/lib/commander.js:
  122   *        .description('run remote setup commands')
  123   *        .action(function(){
  124:  *          console.log('setup');
  125   *        });
  126   *     
  ...
  129   *        .description('run the given remote command')
  130   *        .action(function(cmd){
  131:  *          console.log('exec "%s"', cmd);
  132   *        });
  133   *     
  ...
  136   *        .description('deploy the given env')
  137   *        .action(function(env){
  138:  *          console.log('deploying "%s"', env);
  139   *        });
  140   *     
  ...
  518  
  519  Command.prototype.missingArgument = function(name){
  520:   console.error();
  521:   console.error("  error: missing required argument `%s'", name);
  522:   console.error();
  523    process.exit(1);
  524  };
  ...
  533  
  534  Command.prototype.optionMissingArgument = function(option, flag){
  535:   console.error();
  536    if (flag) {
  537:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  538    } else {
  539:     console.error("  error: option `%s' argument missing", option.flags);
  540    }
  541:   console.error();
  542    process.exit(1);
  543  };
  ...
  551  
  552  Command.prototype.unknownOption = function(flag){
  553:   console.error();
  554:   console.error("  error: unknown option `%s'", flag);
  555:   console.error();
  556    process.exit(1);
  557  };
  ...
  575    this.option(flags, 'output the version number');
  576    this.on('version', function(){
  577:     console.log(str);
  578      process.exit(0);
  579    });
  ...
  768  Command.prototype.promptMultiLine = function(str, fn){
  769    var buf = [];
  770:   console.log(str);
  771    process.stdin.setEncoding('utf8');
  772    process.stdin.on('data', function(val){
  ...
  792   *
  793   *     program.prompt('Username: ', function(name){
  794:  *       console.log('hi %s', name);
  795   *     });
  796   *     
  797   *     program.prompt('Description:', function(desc){
  798:  *       console.log('description was "%s"', desc.trim());
  799   *     });
  800   *
  ...
  838   *
  839   *     program.password('Password: ', function(pass){
  840:  *       console.log('got "%s"', pass);
  841   *       process.stdin.destroy();
  842   *     });
  843   *
  844   *     program.password('Password: ', '*', function(pass){
  845:  *       console.log('got "%s"', pass);
  846   *       process.stdin.destroy();
  847   *     });
  ...
  870    process.stdin.on('keypress', function(c, key){
  871      if (key && 'enter' == key.name) {
  872:       console.log();
  873        process.stdin.removeAllListeners('keypress');
  874        tty.setRawMode(false);
  ...
  879  
  880      if (key && key.ctrl && 'c' == key.name) {
  881:       console.log('%s', buf);
  882        process.exit();
  883      }
  ...
  894   *
  895   *      program.confirm('continue? ', function(ok){
  896:  *        console.log(' got %j', ok);
  897   *        process.stdin.destroy();
  898   *      });
  ...
  922   *      var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];
  923   *      
  924:  *      console.log('Choose the coolest pet:');
  925   *      program.choose(list, function(i){
  926:  *        console.log('you chose %d "%s"', i, list[i]);
  927   *        process.stdin.destroy();
  928   *      });
  ...
  945    list.forEach(function(item, i){
  946      if (hasDefault && i == index) {
  947:       console.log('* %d) %s', i + 1, item);
  948      } else {
  949:       console.log('  %d) %s', i + 1, item);
  950      }
  951    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/mocha.js:
  132      if (!_reporter) try { _reporter = require(reporter); } catch (err) {};
  133      if (!_reporter && reporter === 'teamcity')
  134:       console.warn('The Teamcity reporter was moved to a package named ' +
  135          'mocha-teamcity-reporter ' +
  136          '(https://npmjs.org/package/mocha-teamcity-reporter).');

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/base.js:
  156  
  157  exports.list = function(failures){
  158:   console.error();
  159    failures.forEach(function(test, i){
  160      // format
  ...
  202        .replace(/^/gm, '  ');
  203  
  204:     console.error(fmt, (i + 1), test.fullTitle(), msg, stack);
  205    });
  206  };
  ...
  284    var fmt;
  285  
  286:   console.log();
  287  
  288    // passes
  ...
  291      + color('light', ' (%s)');
  292  
  293:   console.log(fmt,
  294      stats.passes || 0,
  295      ms(stats.duration));
  ...
  300        + color('pending', ' %d pending');
  301  
  302:     console.log(fmt, stats.pending);
  303    }
  304  
  ...
  307      fmt = color('fail', '  %d failing');
  308  
  309:     console.error(fmt,
  310        stats.failures);
  311  
  312      Base.list(this.failures);
  313:     console.error();
  314    }
  315  
  316:   console.log();
  317  };
  318  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/doc.js:
   35      if (suite.root) return;
   36      ++indents;
   37:     console.log('%s<section class="suite">', indent());
   38      ++indents;
   39:     console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));
   40:     console.log('%s<dl>', indent());
   41    });
   42  
   43    runner.on('suite end', function(suite){
   44      if (suite.root) return;
   45:     console.log('%s</dl>', indent());
   46      --indents;
   47:     console.log('%s</section>', indent());
   48      --indents;
   49    });
   50  
   51    runner.on('pass', function(test){
   52:     console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));
   53      var code = utils.escape(utils.clean(test.fn.toString()));
   54:     console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);
   55    });
   56  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/dot.js:
   51  
   52    runner.on('end', function(){
   53:     console.log();
   54      self.epilogue();
   55    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/json-stream.js:
   28  
   29    runner.on('start', function(){
   30:     console.log(JSON.stringify(['start', { total: total }]));
   31    });
   32  
   33    runner.on('pass', function(test){
   34:     console.log(JSON.stringify(['pass', clean(test)]));
   35    });
   36  
   37    runner.on('fail', function(test, err){
   38:     console.log(JSON.stringify(['fail', clean(test)]));
   39    });
   40  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/landing.js:
   86    runner.on('end', function(){
   87      cursor.show();
   88:     console.log();
   89      self.epilogue();
   90    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/list.js:
   29  
   30    runner.on('start', function(){
   31:     console.log();
   32    });
   33  
   ..
   39      var fmt = color('checkmark', '  -')
   40        + color('pending', ' %s');
   41:     console.log(fmt, test.fullTitle());
   42    });
   43  
   ..
   47        + color(test.speed, '%dms');
   48      cursor.CR();
   49:     console.log(fmt, test.fullTitle(), test.duration);
   50    });
   51  
   52    runner.on('fail', function(test, err){
   53      cursor.CR();
   54:     console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());
   55    });
   56  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/progress.js:
   48    // tests started
   49    runner.on('start', function(){
   50:     console.log();
   51      cursor.hide();
   52    });
   ..
   75    runner.on('end', function(){
   76      cursor.show();
   77:     console.log();
   78      self.epilogue();
   79    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/spec.js:
   34  
   35    runner.on('start', function(){
   36:     console.log();
   37    });
   38  
   39    runner.on('suite', function(suite){
   40      ++indents;
   41:     console.log(color('suite', '%s%s'), indent(), suite.title);
   42    });
   43  
   44    runner.on('suite end', function(suite){
   45      --indents;
   46:     if (1 == indents) console.log();
   47    });
   48  
   49    runner.on('pending', function(test){
   50      var fmt = indent() + color('pending', '  - %s');
   51:     console.log(fmt, test.title);
   52    });
   53  
   ..
   58          + color('pass', ' %s ');
   59        cursor.CR();
   60:       console.log(fmt, test.title);
   61      } else {
   62        var fmt = indent()
   ..
   65          + color(test.speed, '(%dms)');
   66        cursor.CR();
   67:       console.log(fmt, test.title, test.duration);
   68      }
   69    });
   ..
   71    runner.on('fail', function(test, err){
   72      cursor.CR();
   73:     console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
   74    });
   75  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/tap.js:
   32    runner.on('start', function(){
   33      var total = runner.grepTotal(runner.suite);
   34:     console.log('%d..%d', 1, total);
   35    });
   36  
   ..
   40  
   41    runner.on('pending', function(test){
   42:     console.log('ok %d %s # SKIP -', n, title(test));
   43    });
   44  
   45    runner.on('pass', function(test){
   46      passes++;
   47:     console.log('ok %d %s', n, title(test));
   48    });
   49  
   50    runner.on('fail', function(test, err){
   51      failures++;
   52:     console.log('not ok %d %s', n, title(test));
   53:     if (err.stack) console.log(err.stack.replace(/^/gm, '  '));
   54    });
   55  
   56    runner.on('end', function(){
   57:     console.log('# tests ' + (passes + failures));
   58:     console.log('# pass ' + passes);
   59:     console.log('# fail ' + failures);
   60    });
   61  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/lib/reporters/xunit.js:
   50  
   51    runner.on('end', function(){
   52:     console.log(tag('testsuite', {
   53          name: 'Mocha Tests'
   54        , tests: stats.tests
   ..
   61  
   62      tests.forEach(test);
   63:     console.log('</testsuite>');
   64    });
   65  }
   ..
   85      var err = test.err;
   86      attrs.message = escape(err.message);
   87:     console.log(tag('testcase', attrs, false, tag('failure', attrs, false, cdata(err.stack))));
   88    } else if (test.pending) {
   89:     console.log(tag('testcase', attrs, false, tag('skipped', {}, true)));
   90    } else {
   91:     console.log(tag('testcase', attrs, true) );
   92    }
   93  }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/node_modules/debug/lib/debug.js:
  109        + ' +' + humanize(ms) + '\u001b[0m';
  110  
  111:     console.log.apply(this, arguments);
  112    }
  113  
  ...
  117      fmt = new Date().toUTCString()
  118        + ' ' + name + ' ' + fmt;
  119:     console.log.apply(this, arguments);
  120    }
  121  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/node_modules/jade/lib/jade.js:
  103      // Debug compiler
  104      if (options.debug) {
  105:       console.error('\nCompiled Function:\n\n\033[90m%s\033[0m', js.replace(/^/gm, '  '));
  106      }
  107  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/grunt-simple-mocha/node_modules/mocha/node_modules/jade/node_modules/commander/lib/commander.js:
  122   *        .description('run remote setup commands')
  123   *        .action(function(){
  124:  *          console.log('setup');
  125   *        });
  126   *     
  ...
  129   *        .description('run the given remote command')
  130   *        .action(function(cmd){
  131:  *          console.log('exec "%s"', cmd);
  132   *        });
  133   *     
  ...
  136   *        .description('deploy the given env')
  137   *        .action(function(env){
  138:  *          console.log('deploying "%s"', env);
  139   *        });
  140   *     
  ...
  518  
  519  Command.prototype.missingArgument = function(name){
  520:   console.error();
  521:   console.error("  error: missing required argument `%s'", name);
  522:   console.error();
  523    process.exit(1);
  524  };
  ...
  533  
  534  Command.prototype.optionMissingArgument = function(option, flag){
  535:   console.error();
  536    if (flag) {
  537:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  538    } else {
  539:     console.error("  error: option `%s' argument missing", option.flags);
  540    }
  541:   console.error();
  542    process.exit(1);
  543  };
  ...
  551  
  552  Command.prototype.unknownOption = function(flag){
  553:   console.error();
  554:   console.error("  error: unknown option `%s'", flag);
  555:   console.error();
  556    process.exit(1);
  557  };
  ...
  575    this.option(flags, 'output the version number');
  576    this.on('version', function(){
  577:     console.log(str);
  578      process.exit(0);
  579    });
  ...
  768  Command.prototype.promptMultiLine = function(str, fn){
  769    var buf = [];
  770:   console.log(str);
  771    process.stdin.setEncoding('utf8');
  772    process.stdin.on('data', function(val){
  ...
  792   *
  793   *     program.prompt('Username: ', function(name){
  794:  *       console.log('hi %s', name);
  795   *     });
  796   *     
  797   *     program.prompt('Description:', function(desc){
  798:  *       console.log('description was "%s"', desc.trim());
  799   *     });
  800   *
  ...
  838   *
  839   *     program.password('Password: ', function(pass){
  840:  *       console.log('got "%s"', pass);
  841   *       process.stdin.destroy();
  842   *     });
  843   *
  844   *     program.password('Password: ', '*', function(pass){
  845:  *       console.log('got "%s"', pass);
  846   *       process.stdin.destroy();
  847   *     });
  ...
  870    process.stdin.on('keypress', function(c, key){
  871      if (key && 'enter' == key.name) {
  872:       console.log();
  873        process.stdin.removeAllListeners('keypress');
  874        tty.setRawMode(false);
  ...
  879  
  880      if (key && key.ctrl && 'c' == key.name) {
  881:       console.log('%s', buf);
  882        process.exit();
  883      }
  ...
  894   *
  895   *      program.confirm('continue? ', function(ok){
  896:  *        console.log(' got %j', ok);
  897   *        process.stdin.destroy();
  898   *      });
  ...
  922   *      var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];
  923   *      
  924:  *      console.log('Choose the coolest pet:');
  925   *      program.choose(list, function(i){
  926:  *        console.log('you chose %d "%s"', i, list[i]);
  927   *        process.stdin.destroy();
  928   *      });
  ...
  945    list.forEach(function(item, i){
  946      if (hasDefault && i == index) {
  947:       console.log('* %d) %s', i + 1, item);
  948      } else {
  949:       console.log('  %d) %s', i + 1, item);
  950      }
  951    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/handlebars/lib/handlebars/base.js:
  215      if (logger.level <= level) {
  216        var method = logger.methodMap[level];
  217:       if (typeof console !== 'undefined' && console[method]) {
  218:         console[method].call(console, obj);
  219        }
  220      }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/handlebars/node_modules/uglify-js/lib/compress.js:
 1624                                  compressor.warn(ex.toString());
 1625                              } else {
 1626:                                 console.log(ex);
 1627                              }
 1628                          }

/Users/maurizio/dev/stackticjs/stacktic/node_modules/handlebars/node_modules/uglify-js/lib/mozilla-ast.js:
  240  
  241          // moz_to_me = parse(moz_to_me).print_to_string({ beautify: true });
  242:         // console.log(moz_to_me);
  243  
  244          moz_to_me = new Function("mytype", "my_start_token", "my_end_token", "from_moz", "return(" + moz_to_me + ")")(

/Users/maurizio/dev/stackticjs/stacktic/node_modules/handlebars/node_modules/uglify-js/node_modules/async/lib/async.js:
    1: /*global setImmediate: false, setTimeout: false, console: false */
    2  (function () {
    3  
    .
  807      };
  808  
  809:     var _console_fn = function (name) {
  810          return function (fn) {
  811              var args = Array.prototype.slice.call(arguments, 1);
  812              fn.apply(null, args.concat([function (err) {
  813                  var args = Array.prototype.slice.call(arguments, 1);
  814:                 if (typeof console !== 'undefined') {
  815                      if (err) {
  816:                         if (console.error) {
  817:                             console.error(err);
  818                          }
  819                      }
  820:                     else if (console[name]) {
  821                          _each(args, function (x) {
  822:                             console[name](x);
  823                          });
  824                      }
  ...
  827          };
  828      };
  829:     async.log = _console_fn('log');
  830:     async.dir = _console_fn('dir');
  831:     /*async.info = _console_fn('info');
  832:     async.warn = _console_fn('warn');
  833:     async.error = _console_fn('error');*/
  834  
  835      async.memoize = function (fn, hasher) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/highlight.js/lib/languages/coffeescript.js:
   16        '__hasProp __extends __slice __bind __indexOf',
   17      built_in:
   18:       'npm require console print module exports global window document'
   19    };
   20    var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/lib/paginate.js:
  131  		}
  132  		catch (exception) {
  133: 			console.error('Could not patch Mongoose, due to the following exception:');
  134: 			console.error(exception);
  135  		}
  136  	}

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/node_modules/jade/lib/jade.js:
  103      // Debug compiler
  104      if (options.debug) {
  105:       console.error('\nCompiled Function:\n\n\033[90m%s\033[0m', js.replace(/^/gm, '  '));
  106      }
  107  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/node_modules/jade/node_modules/coffee-script/lib/coffee-script/cake.js:
   76      relative = path.relative || path.resolve;
   77      cakefilePath = path.join(relative(__originalDirname, process.cwd()), 'Cakefile');
   78:     console.log("" + cakefilePath + " defines the following tasks:\n");
   79      for (name in tasks) {
   80        task = tasks[name];
   ..
   82        spaces = spaces > 0 ? Array(spaces + 1).join(' ') : '';
   83        desc = task.description ? "# " + task.description : '';
   84:       console.log("cake " + name + spaces + " " + desc);
   85      }
   86      if (switches.length) {
   87:       return console.log(oparse.help());
   88      }
   89    };
   90  
   91    fatalError = function(message) {
   92:     console.error(message + '\n');
   93:     console.log('To see a list of all tasks/options, run "cake"');
   94      return process.exit(1);
   95    };

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/node_modules/jade/node_modules/coffee-script/lib/coffee-script/command.js:
  102          }
  103          if (topLevel) {
  104:           console.error("File not found: " + source);
  105            process.exit(1);
  106          }
  ...
  427  
  428    timeLog = function(message) {
  429:     return console.log("" + ((new Date).toLocaleTimeString()) + " - " + message);
  430    };
  431  

/Users/maurizio/dev/stackticjs/stacktic/node_modules/paginate/node_modules/jade/node_modules/commander/lib/commander.js:
  122   *        .description('run remote setup commands')
  123   *        .action(function(){
  124:  *          console.log('setup');
  125   *        });
  126   *     
  ...
  129   *        .description('run the given remote command')
  130   *        .action(function(cmd){
  131:  *          console.log('exec "%s"', cmd);
  132   *        });
  133   *     
  ...
  136   *        .description('deploy the given env')
  137   *        .action(function(env){
  138:  *          console.log('deploying "%s"', env);
  139   *        });
  140   *     
  ...
  518  
  519  Command.prototype.missingArgument = function(name){
  520:   console.error();
  521:   console.error("  error: missing required argument `%s'", name);
  522:   console.error();
  523    process.exit(1);
  524  };
  ...
  533  
  534  Command.prototype.optionMissingArgument = function(option, flag){
  535:   console.error();
  536    if (flag) {
  537:     console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  538    } else {
  539:     console.error("  error: option `%s' argument missing", option.flags);
  540    }
  541:   console.error();
  542    process.exit(1);
  543  };
  ...
  551  
  552  Command.prototype.unknownOption = function(flag){
  553:   console.error();
  554:   console.error("  error: unknown option `%s'", flag);
  555:   console.error();
  556    process.exit(1);
  557  };
  ...
  575    this.option(flags, 'output the version number');
  576    this.on('version', function(){
  577:     console.log(str);
  578      process.exit(0);
  579    });
  ...
  768  Command.prototype.promptMultiLine = function(str, fn){
  769    var buf = [];
  770:   console.log(str);
  771    process.stdin.setEncoding('utf8');
  772    process.stdin.on('data', function(val){
  ...
  792   *
  793   *     program.prompt('Username: ', function(name){
  794:  *       console.log('hi %s', name);
  795   *     });
  796   *     
  797   *     program.prompt('Description:', function(desc){
  798:  *       console.log('description was "%s"', desc.trim());
  799   *     });
  800   *
  ...
  838   *
  839   *     program.password('Password: ', function(pass){
  840:  *       console.log('got "%s"', pass);
  841   *       process.stdin.destroy();
  842   *     });
  843   *
  844   *     program.password('Password: ', '*', function(pass){
  845:  *       console.log('got "%s"', pass);
  846   *       process.stdin.destroy();
  847   *     });
  ...
  870    process.stdin.on('keypress', function(c, key){
  871      if (key && 'enter' == key.name) {
  872:       console.log();
  873        process.stdin.removeAllListeners('keypress');
  874        tty.setRawMode(false);
  ...
  879  
  880      if (key && key.ctrl && 'c' == key.name) {
  881:       console.log('%s', buf);
  882        process.exit();
  883      }
  ...
  894   *
  895   *      program.confirm('continue? ', function(ok){
  896:  *        console.log(' got %j', ok);
  897   *        process.stdin.destroy();
  898   *      });
  ...
  922   *      var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];
  923   *      
  924:  *      console.log('Choose the coolest pet:');
  925   *      program.choose(list, function(i){
  926:  *        console.log('you chose %d "%s"', i, list[i]);
  927   *        process.stdin.destroy();
  928   *      });
  ...
  945    list.forEach(function(item, i){
  946      if (hasDefault && i == index) {
  947:       console.log('* %d) %s', i + 1, item);
  948      } else {
  949:       console.log('  %d) %s', i + 1, item);
  950      }
  951    });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/slug/node_modules/unicode/node_modules/bufferstream/lib/fn.js:
   19      process.nextTick(function() {
   20        if (exports.warn) {
   21:         return console.warn(exports.warn);
   22        }
   23      });

/Users/maurizio/dev/stackticjs/stacktic/node_modules/yfm/node_modules/fs-utils/node_modules/async/lib/async.js:
    1: /*global setImmediate: false, setTimeout: false, console: false */
    2  (function () {
    3  
    .
  807      };
  808  
  809:     var _console_fn = function (name) {
  810          return function (fn) {
  811              var args = Array.prototype.slice.call(arguments, 1);
  812              fn.apply(null, args.concat([function (err) {
  813                  var args = Array.prototype.slice.call(arguments, 1);
  814:                 if (typeof console !== 'undefined') {
  815                      if (err) {
  816:                         if (console.error) {
  817:                             console.error(err);
  818                          }
  819                      }
  820:                     else if (console[name]) {
  821                          _each(args, function (x) {
  822:                             console[name](x);
  823                          });
  824                      }
  ...
  827          };
  828      };
  829:     async.log = _console_fn('log');
  830:     async.dir = _console_fn('dir');
  831:     /*async.info = _console_fn('info');
  832:     async.warn = _console_fn('warn');
  833:     async.error = _console_fn('error');*/
  834  
  835      async.memoize = function (fn, hasher) {

/Users/maurizio/dev/stackticjs/stacktic/node_modules/yfm/node_modules/js-yaml/lib/js-yaml/loader.js:
  156      throw error;
  157    } else {
  158:     console.warn(error.toString());
  159    }
  160  }

702 matches across 137 files
